<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog Entries :: phly, boy, phly</title>
  <updated>2013-02-27T18:41:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.1.4dev">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog-atom.xml"/>
  <id>http://mwop.net/blog.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On PHP-FIG]]></title>
    <published>2013-02-27T18:41:00+0000</published>
    <updated>2013-02-27T18:41:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2013-02-27-resigned-from-php-fig.html"/>
    <id>http://mwop.net/blog/2013-02-27-resigned-from-php-fig.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Yesterday, I left the PHP-FIG group.</xhtml:p>
<xhtml:p>As in: left the github organization I created, and removed
myself from the mailing list I created.</xhtml:p>
<xhtml:p>I have contacted members of my development team and the Zend
Framework community review team to see if anybody is willing to
represent ZF in the group. I no longer am.</xhtml:p>
<xhtml:p>I was going to leave quietly, but as a favor to Paul M. Jones --
a good friend and sometimes collaborator -- I'm writing now.</xhtml:p>
<xhtml:p>I had high hopes for the group. It was the culmination of
something I've been ruminating on for almost a decade (<xhtml:a href="http://www.mwop.net/blog/12-PHP-standards-ruminations.html">see
post number 12 on my blog, dated to January 2004, for proof</xhtml:a>).
My thoughts have mainly been around coding standards and best
practices, helping educate developers around their benefits, and
how to leverage both in order to create maintainable code.</xhtml:p>
<xhtml:p>First, a few thoughts:</xhtml:p>
<xhtml:ul>
<xhtml:li>I personally feel that interfaces are a bad fit for the
organization; <xhtml:a href="http://www.mwop.net/blog/2012-12-20-on-shared-interfaces.html">I
have outlined my thoughts on interface standardization
elsewhere</xhtml:a>.</xhtml:li>
<xhtml:li>Multiple coding standards are okay. A standard for every
project, organization, or developer is not. The ideal is a handful
or so for any given language, as more than that means there are no
standards; it's just a free-for-all.</xhtml:li>
<xhtml:li>No individual coding standard will satisfy all developers. In
fact, in my experience, there will always be choices in
<xhtml:em>any</xhtml:em> standard that even the authors of the standard are
unhappy with. The point of a coding standard is not to make
everyone happy. It's to have a document that details the structure
of code so that developers focus on the intent of code, not the way
it's formatted.</xhtml:li>
<xhtml:li>Coding standards are useless if they do not contain hard rules,
as automated tooling to sniff for CS issues cannot be written.
"COULD", "SHOULD", and "CAN" are all problematic, and any use of
"EITHER" is going to make automation ridiculously complex.</xhtml:li>
<xhtml:li>In the end, no matter what the technical arguments are for any
given detail, all coding standards are ultimately subjective. The
only objective standard is what is parseable in the given
language.</xhtml:li>
<xhtml:li>What matters is that you <xhtml:em>adopt</xhtml:em> an <xhtml:em>existing</xhtml:em>
standard, and <xhtml:em>use</xhtml:em> it. When you do, you can automate some
code review, prevent developer commit skirmishes arising from
differences in formatting aesthetics, and focus on the problem
you're trying to solve in your code.</xhtml:li>
</xhtml:ul>
<xhtml:p>With those thoughts as background, then, I can better explain my
departure.</xhtml:p>
<xhtml:p>The point of PHP-FIG was to create consensus around practices
shared by its member groups, no more, no less.</xhtml:p>
<xhtml:p>When PSR-0 was created, we had around a half-dozen member
groups. You have to start somewhere.</xhtml:p>
<xhtml:p>Each proposal since then has had an increasing number of members
both discussing and voting on proposals. That means the early
proposals may not be representative of the later membership. That's
a simple fact.</xhtml:p>
<xhtml:p>That does not mean the standards should <xhtml:em>change</xhtml:em>. Once
published, a standard is done. The only thing that can happen is
that a <xhtml:em>new</xhtml:em> standard may be created that can
<xhtml:em>supersede</xhtml:em> an existing standard, or be used
<xhtml:em>instead</xhtml:em> <xhtml:em>of</xhtml:em> an existing standard. As examples from
existing standards bodies, consider RFC 822, which codified the
format of internet text messages (email); it superseded at least
one other RFC, and has itself been superseded twice (in RFC 2822
and RFC 5322).</xhtml:p>
<xhtml:p>PHP-FIG adopted the same workflow. If new practices emerge, or
the makeup of the organization significantly changes, and existing
recommendations are found to be obsolete or outdated, a
<xhtml:em>new</xhtml:em> recommendation may be proposed to supersede or be
adopted in parallel to them.</xhtml:p>
<xhtml:p>Parallel standards from the same body, however, should be
considered <xhtml:em>very</xhtml:em> carefully, as they lead to splintering and
fragmentation of the standards body and member organizations. If
consensus cannot be achieved, why bother?</xhtml:p>
<xhtml:p>What I see happening in the PHP-FIG github organization (in pull
request comment threads) and google group, however, is the exact
opposite of the goals that originally led to the group being
formed. Instead of people trying to achieve consensus, I see a lot
of polarizing, all-or-nothing arguments occurring, often over very
subjective things. Developers are defending their opinions and
viewpoints with little to no real analysis of what others present.
I see a lot of "you're wrong" types of remarks. These are coming
largely from non-voting members, but it means the signal-to-noise
ratio within these forums is skewed; it's hard to find reasonable
discussion occurring due to thsi behavior.</xhtml:p>
<xhtml:p>The "old guard" is guilty of this at times, too -- but not as
often as many might insist. The insistence of folks like Paul M
Jones, Paul Dragoonis, and Lukas Kahwe Smith that discussion should
happen on-list, and that PRs are not considered for existing,
accepted standards is actually reasonable -- for the reasons I
outlined above. A standard is written once; if it needs revision, a
<xhtml:em>new</xhtml:em> standard should be written superseding it.</xhtml:p>
<xhtml:p>What is most irritating, however, is it doesn't matter how many
times such statements are made; people insist on debating their pet
peeves on existing standards without following the guidelines and
established process -- nor listening when others point out that the
debate has occurred before, will occur again, and needs to stop for
now so that we can focus on constructive tasks. I see a lot of name
calling, a lot of accusations of a "dictatorship" (they're
<xhtml:em>recommendations</xhtml:em> people; they're not
<xhtml:em>requirements</xhtml:em>), and overall egotistical behavior.</xhtml:p>
<xhtml:p>I'm tired of it. I have better things to do with my time, things
I want to create, software I want to support, hobbies and interests
I want to pursue. Debating brace placement, tabs vs spaces (for the
umpteenth time), or whether or not annotations have a place in
programming in a dynamic language? Not so much.</xhtml:p>
<xhtml:p>I hope PHP-FIG can achieve the goals it started with. It will
have to do so without my participation, though.</xhtml:p>
<xhtml:h4>Note</xhtml:h4>
<xhtml:p>I've disabled comments on this post.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[RESTful APIs with ZF2, Part 3]]></title>
    <published>2013-02-25T12:29:00+0000</published>
    <updated>2013-02-25T12:29:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2013-02-25-restful-apis-with-zf2-part-3.html"/>
    <id>http://mwop.net/blog/2013-02-25-restful-apis-with-zf2-part-3.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In my <xhtml:a href="/blog/2013-02-11-restful-apis-with-zf2-part-1.html">previous</xhtml:a>
<xhtml:a href="/blog/2013-02-13-restful-apis-with-zf2-part-2.html">posts</xhtml:a>, I
covered basics of JSON hypermedia APIs using Hypermedia Application
Language (HAL), and methods for reporting errors, including
API-Problem and vnd.error.</xhtml:p>
<xhtml:p>In this post, I'll be covering <xhtml:em>documenting</xhtml:em> your API --
techniques you can use to indicate what HTTP operations are
allowed, as well as convey the full documentation on what endpoints
are available, what they accept, and what you can expect them to
return.</xhtml:p>
<xhtml:p>While I will continue covering general aspects of RESTful APIs
in this post, I will also finally introduce several ZF2-specific
techniques.</xhtml:p>
<xhtml:h2>Why Document?</xhtml:h2>
<xhtml:p>If you're asking this question, you've either never consumed
software, or your software is perfect and self-documenting. I
frankly don't believe either one.</xhtml:p>
<xhtml:p>In the case of APIs, those consuming the API need to know how to
use it.</xhtml:p>
<xhtml:ul>
<xhtml:li>What endpoints are available? Which operations are available
for each endpoint?</xhtml:li>
<xhtml:li>What does each endpoint expect as a payload during the
request?</xhtml:li>
<xhtml:li>What can you expect as a payload in return?</xhtml:li>
<xhtml:li>How will errors be communicated?</xhtml:li>
</xhtml:ul>
<xhtml:p>While the promise of hypermedia APIs is that each response tells
you the next steps available, you still, somewhere along the way,
need more information - what payloads look like, which HTTP verbs
should be used, and more. If you're <xhtml:strong>not</xhtml:strong>
documenting your API, you're "doing it wrong."</xhtml:p>
<xhtml:h2>Where Should Documentation Live?</xhtml:h2>
<xhtml:p>This is the much bigger question.</xhtml:p>
<xhtml:p>Of the questions I raised above, detailing what should be
documented, there are two specific types. When discussing what
operations are available, we have a technical solution in the form
of the <xhtml:code>OPTIONS</xhtml:code> method and its counterpart, the
<xhtml:code>Allow</xhtml:code> header. Everything else falls under end-user
documentation.</xhtml:p>
<xhtml:h2>OPTIONS</xhtml:h2>
<xhtml:p>The HTTP specification details the <xhtml:code>OPTIONS</xhtml:code> method
as idempotent, non-cacheable, and for use in detailing what
operations are available for the given resource specified by the
request URI. It makes specific mention of the <xhtml:code>Allow</xhtml:code>
header, but does not limit what is returned for requests made via
this method.</xhtml:p>
<xhtml:p>The <xhtml:code>Allow</xhtml:code> header details the allowed HTTP methods
for the given resource.</xhtml:p>
<xhtml:p>Used in combination, you make an <xhtml:code>OPTIONS</xhtml:code> request to
a URI, and it should return a response containing an
<xhtml:code>Allow</xhtml:code> header; from that header value, you then know
what other HTTP methods can be made to that URI.</xhtml:p>
<xhtml:p>What this tells us is that our RESTful endpoint should do the
following:</xhtml:p>
<xhtml:ul>
<xhtml:li>When an <xhtml:code>OPTIONS</xhtml:code> request is made, return a response
with an <xhtml:code>Allow</xhtml:code> header that has a list of the available
HTTP methods allowed.</xhtml:li>
<xhtml:li>For any HTTP method we do <xhtml:em>not</xhtml:em> allow, we should return
a "405 Not Allowed" response.</xhtml:li>
</xhtml:ul>
<xhtml:p>These are fairly easy to accomplish in ZF2. <xhtml:em>(See? I promised
I'd get to some ZF2 code in this post!)</xhtml:em></xhtml:p>
<xhtml:p>When creating RESTful endpoints in ZF2, I recommend using
<xhtml:code>Zend\Mvc\Controller\AbstractRestfulController</xhtml:code>. This
controller contains an <xhtml:code>options()</xhtml:code> method which you can
use to respond to an <xhtml:code>OPTIONS</xhtml:code> request. As with any ZF2
controller, returning a response object will prevent rendering and
bubble out immediately so that the response is returned.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace My\Controller;
use Zend\Mvc\Controller\AbstractRestfulController;

class FooController extends AbstractRestfulController
{
    public function options()
    {
        $response = $this-&gt;getResponse();
        $headers  = $response-&gt;getHeaders();

        // If you want to vary based on whether this is a collection or an
        // individual item in that collection, check if an identifier from
        // the route is present
        if ($this-&gt;params()-&gt;fromRoute('id', false)) {
            // Allow viewing, partial updating, replacement, and deletion
            // on individual items
            $headers-&gt;addHeaderLine('Allow', implode(',', array(
                'GET',
                'PATCH',
                'PUT',
                'DELETE',
            )));
            return $response;
        }

        // Allow only retrieval and creation on collections
        $headers-&gt;addHeaderLine('Allow', implode(',', array(
            'GET',
            'POST',
        )));
        return $response;
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The next trick is returning the 405 response if an invalid
option is used. For this, you can create a listener in your
controller, and wire it to listen at higher-than-default priority.
As an example:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace My\Controller;
use Zend\EventManager\EventManagerInterface;
use Zend\Mvc\Controller\AbstractRestfulController;

class FooController extends AbstractRestfulController
{
    protected $allowedCollectionMethods = array(
        'GET',
        'POST',
    );

    protected $allowedResourceMethods = array(
        'GET',
        'PATCH',
        'PUT',
        'DELETE',
    );

    public function setEventManager(EventManagerInterface $events)
    {
        parent::setEventManager($events);
        $events-&gt;attach('dispatch', array($this, 'checkOptions'), 10);
    }

    public function checkOptions($e)
    {
        $matches  = $e-&gt;getRouteMatch();
        $response = $e-&gt;getResponse();
        $request  = $e-&gt;getRequest();
        $method   = $request-&gt;getMethod();

        // test if we matched an individual resource, and then test
        // if we allow the particular request method
        if ($matches-&gt;getParam('id', false)) {
            if (!in_array($method, $this-&gt;allowedResourceMethods)) {
                $response-&gt;setStatusCode(405);
                return $response;
            }
            return;
        }

        // We matched a collection; test if we allow the particular request 
        // method
        if (!in_array($method, $this-&gt;allowedCollectionMethods)) {
            $response-&gt;setStatusCode(405);
            return $response;
        }
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Note that I moved the allowed methods into properties; if I did
the above, I'd refactor the <xhtml:code>options()</xhtml:code> method to use
those properties as well to ensure they are kept in sync.</xhtml:p>
<xhtml:p>Also note that in the case of an invalid method, I return a
response object. This ensures that nothing else needs to execute in
the controller; I discover the problem and return early.</xhtml:p>
<xhtml:h2>End-User Documentation</xhtml:h2>
<xhtml:p>Now that we have the technical solution out of the way, we're
still left with the bulk of the work left to accomplish: providing
end-user documentation detailing the various payloads, errors,
etc.</xhtml:p>
<xhtml:p>I've seen two compelling approaches to this problem. The first
builds on the <xhtml:code>OPTIONS</xhtml:code> method, and the other uses a
hypermedia link in every response to point to documentation.</xhtml:p>
<xhtml:p>The <xhtml:code>OPTIONS</xhtml:code> solution is this: <xhtml:a href="http://zacstewart.com/2012/04/14/http-options-method.html">use the
body of an <xhtml:code>OPTIONS</xhtml:code> response to provide
documentation</xhtml:a>. (Keith Casey <xhtml:a href="http://vimeo.com/49613738">gave an excellent short presentation
about this at REST Fest 2012</xhtml:a>).</xhtml:p>
<xhtml:p>The <xhtml:code>OPTIONS</xhtml:code> method allows for you to return a body
in the response, and also allows for content negotiation. The
theory, then, is that you return media-type-specific documentation
that details the methods allowed, and what they specifically accept
in the body. While there is no standard for this at this time, the
first article I linked suggested including a description, the
parameters expected, and one or more example request bodies for
each HTTP method allowed; you'd likely also want to detail the
responses that can be expected.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "POST": {
        "description": "Create a new status",
        "parameters": {
            "type": {
                "type": "string",
                "description": "Status type -- text, image, or url; defaults to text",
                "required": false
            },
            "text": {
                "type": "string",
                "description": "Status text; required for text types, optional for others",
                "required": false
            },
            "image_url": {
                "type": "string",
                "description": "URL of image for image types; required for image types",
                "required": false
            },
            "link_url": {
                "type": "string",
                "description": "URL of image for link types; required for link types",
                "required": false
            }
        },
        "responses": [
            {
                "describedBy": "http://example.com/problems/invalid-status",
                "title": "Submitted status was invalid",
                "detail": "Missing text field required for text type"
            },
            {
                "id": "abcdef123456",
                "type": "text",
                "text": "This is a status update",
                "timestamp": "2013-02-22T10:06:05+0:00"
            }
        ],
        "examples": [
            {
                "text": "This is a status update"
            },
            {
                "type": "image",
                "text": "This is the image caption",
                "image_url": "http://example.com/favicon.ico"
            },
            {
                "type": "link",
                "text": "This is a description of the link",
                "link_url": "http://example.com/"
            },
        ]
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>If you were to use this methodology, you would alter the
<xhtml:code>options()</xhtml:code> method such that it does not return a
response object, but instead return a view model with the
documentation.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace My\Controller;
use Zend\Mvc\Controller\AbstractRestfulController;

class FooController extends AbstractRestfulController
{
    protected $viewModelMap = array(/* ... */);

    public function options()
    {
        $response = $this-&gt;getResponse();
        $headers  = $response-&gt;getHeaders();

        // Get a view model based on Accept types
        $model    = $this-&gt;acceptableViewModelSelector($this-&gt;viewModelMap);

        // If you want to vary based on whether this is a collection or an
        // individual item in that collection, check if an identifier from
        // the route is present
        if ($this-&gt;params()-&gt;fromRoute('id', false)) {
            // Still set the Allow header
            $headers-&gt;addHeaderLine('Allow', implode(
                ',', 
                $this-&gt;allowedResourceMethods
            ));

            // Set documentation specification as variables
            $model-&gt;setVariables($this-&gt;getResourceDocumentationSpec());
            return $model;
        }

        // Allow only retrieval and creation on collections
        $headers-&gt;addHeaderLine('Allow', implode(
            ',',
            $this-&gt;allowedCollectionMethods
        ));
        $model-&gt;setVariables($this-&gt;getCollectionDocumentationSpec());
        return $model;
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I purposely didn't provide the implementations of the
<xhtml:code>getResourceDocumentationSpec()</xhtml:code> and
<xhtml:code>getCollectionDocumentationSpec()</xhtml:code> methods, as that will
likely be highly specific to your application. Another possibility
is to use your view engine for this, and specify a template file
that has the fully-populated information. This would require a
custom renderer when using JSON or XML, but is a pretty easy
solution.</xhtml:p>
<xhtml:p><xhtml:strong>However, there's one cautionary tale to tell</xhtml:strong>,
something I already mentioned: <xhtml:code>OPTIONS</xhtml:code>, per the
specification, is <xhtml:em>non-cacheable</xhtml:em>. What this means is that
everytime somebody makes an <xhtml:code>OPTIONS</xhtml:code> request, any cache
control headers you provide will be ignored, which means hitting
the server for each and every request to the documentation.
Considering documentation is static, this is problematic; it has
even prompted <xhtml:a href="http://www.mnot.net/blog/2012/10/29/NO_OPTIONS">blog posts urging
you not to use OPTIONS for documentation</xhtml:a>.</xhtml:p>
<xhtml:p>Which brings us to the second solution for end-user
documentation: a static page referenced via a hypermedia link.</xhtml:p>
<xhtml:p>This solution is insanely easy: you simply provide a
<xhtml:code>Link</xhtml:code> header in your response, and provide a
<xhtml:code>describedby</xhtml:code> reference pointing to the documentation
page:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="http">
Link: &lt;http://example.com/api/documentation.md&gt;; rel="describedby"
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>With ZF2, this is trivially easy to accomplish: create a route
and endpoint for your documentation, and then a listener on your
controller that adds the <xhtml:code>Link</xhtml:code> header to your
response.</xhtml:p>
<xhtml:p>The latter, adding the link header, might look like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace My\Controller;
use Zend\EventManager\EventManagerInterface;
use Zend\Mvc\Controller\AbstractRestfulController;

class FooController extends AbstractRestfulController
{
    public function setEventManager(EventManagerInterface $events)
    {
        parent::setEventManager($events);
        $events-&gt;attach('dispatch', array($this, 'injectLinkHeader'), 20);
    }

    public function injectLinkHeader($e)
    {
        $response = $e-&gt;getResponse();
        $headers  = $response-&gt;getHeaders();
        $headers-&gt;addHeaderLine('Link', sprintf(
            '</xhtml:code>
</xhtml:pre></xhtml:div>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[RESTful APIs with ZF2, Part 2]]></title>
    <published>2013-02-13T13:40:00+0000</published>
    <updated>2013-02-13T13:40:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2013-02-13-restful-apis-with-zf2-part-2.html"/>
    <id>http://mwop.net/blog/2013-02-13-restful-apis-with-zf2-part-2.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In my <xhtml:a href="/blog/2013-02-11-restful-apis-with-zf2-part-1.html">last post</xhtml:a>,
I covered some background on REST and the Richardson Maturity
Model, and some emerging standards around hypermedia APIs in JSON;
in particular, I outlined aspects of Hypermedia Application
Language (HAL), and how it can be used to define a generic
structure for JSON resources.</xhtml:p>
<xhtml:p>In this post, I cover an aspect of RESTful APIs that's often
overlooked: reporting problems.</xhtml:p>
<xhtml:h2>Background</xhtml:h2>
<xhtml:p>APIs are useful when they're working. But when they fail,
they're only useful if they provide us with meaningful information;
if all I get is a status code, and no indication of what caused the
issue, or where I might look for more information, I get
frustrated.</xhtml:p>
<xhtml:p>In consuming APIs, I've come to the following conclusions:</xhtml:p>
<xhtml:ul>
<xhtml:li>Error conditions need to provide detailed information as to
what went wrong, and what steps I may be able to take next. An
error code with no context gives me nothing to go on.</xhtml:li>
<xhtml:li>Errors need to be reported consistently. Don't report the error
one way one time, and another way the next.</xhtml:li>
<xhtml:li><xhtml:strong>DO</xhtml:strong> use HTTP status codes to indicate an error
happened. Nothing is more irksome than getting back a 200 status
with an error payload.</xhtml:li>
<xhtml:li>Errors should be reported in a format I have indicated I will
Accept (as in the HTTP header). Perhaps the only think more irksome
than a 200 status code for an error is getting back an HTML page
when I expect JSON.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Why Status Codes Aren't Enough</xhtml:h2>
<xhtml:p>Since REST leverages and builds on HTTP, an expedient solution
for reporting problems is to simply use <xhtml:a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP
status codes</xhtml:a>. These are well understood by web developers,
right?</xhtml:p>
<xhtml:p><xhtml:code>4xx</xhtml:code> error codes are errors made by the requestor,
and are actually fairly reasonable to use for reporting things such
as lack of authorization tokens, incomplete requests, unsupportable
operations, or non-supported media types.</xhtml:p>
<xhtml:p>But what happens when the error is on the server - because
something has gone wrong such as inability to reach your
persistence layer or credential storage? The <xhtml:code>5xx</xhtml:code>
series of status codes is sparse and wholly unsuited to reporting
errors of these types -- <xhtml:em>though you'll likely still want to use
a <xhtml:code>500</xhtml:code> status to report the failure</xhtml:em>. But what do
you present to the consumer so that they know whether or not to try
again, or what to report to you so that you can fix the issue?</xhtml:p>
<xhtml:p>A status code simply isn't enough information most of the time.
Yes, you want to define standard status codes so that your clients
can perform reasonable branching, but you also need a way to
communicate <xhtml:em>details</xhtml:em> to the end-user, so that they can log
the information for themselves, display information to their own
end-users, and/or report it back to you so you can do something to
resolve the situation.</xhtml:p>
<xhtml:h2>Custom Media Types</xhtml:h2>
<xhtml:p>The first step is to use a custom media type. Media types are
typically both a name as well as a structure -- and the latter is
what we're after when it comes to error reporting.</xhtml:p>
<xhtml:p>If we return a response using this media type, the client then
knows how to parse it, and can then process it, log it,
whatever.</xhtml:p>
<xhtml:p>Sure, you can make up your own format -- as long as you are
consistent in using it, and you document it. But personally, I
don't like inventing new formats when standard formats exist
already. Custom formats mean that custom clients are required for
working with the services; using a standard format can save effort
and time.</xhtml:p>
<xhtml:p>In the world of JSON, I've come across two error media types
that appear to be gaining traction:
<xhtml:code>application/api-problem+json</xhtml:code> and
<xhtml:code>application/vnd.error+json</xhtml:code></xhtml:p>
<xhtml:h3>API-Problem</xhtml:h3>
<xhtml:p>This particular media type is <xhtml:a href="http://tools.ietf.org/html/draft-nottingham-http-problem-02">via
the IETF</xhtml:a>. Like HAL, it provides formats in both JSON and XML,
making it a nice cross-platform choice.</xhtml:p>
<xhtml:p>As noted already, the media type is
<xhtml:code>application/api-problem+json</xhtml:code>. The representation is a
single resource, with the following properties:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:strong>describedBy</xhtml:strong>: a URL to a document describing
the error condition (required)</xhtml:li>
<xhtml:li><xhtml:strong>title</xhtml:strong>: a brief title for the error condition
(required)</xhtml:li>
<xhtml:li><xhtml:strong>httpStatus</xhtml:strong>: the HTTP status code for the
current request (optional)</xhtml:li>
<xhtml:li><xhtml:strong>detail</xhtml:strong>: error details specific to this request
(optional)</xhtml:li>
<xhtml:li><xhtml:strong>supportId</xhtml:strong>: a URL to the specific problem
occurrence (e.g., to a log message) (optional)</xhtml:li>
</xhtml:ul>
<xhtml:p>As an example:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="http">
HTTP/1.1 500 Internal Error
Content-Type: application/api-problem+json

{
    "describedBy": "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html",
    "detail": "Status failed validation",
    "httpStatus": 500,
    "title": "Internal Server Error"
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The specification allows a large amount of flexibility -- you
can have your own custom error types, so long as you have a
description of them to link to. You can provide as little or as
much detail as you want, and even decide what information to expose
based on environment.</xhtml:p>
<xhtml:p>I personally like to point to the HTTP status code definitions,
and then provide request-specific detail; I find this gives quick
and simple results that I can later shape as I add more detail to
my API. However, the specification definitely encourages you to
have unique error types with discrete URIs that describe them --
never a bad thing when creating APIs.</xhtml:p>
<xhtml:h3>vnd.error</xhtml:h3>
<xhtml:p>This is a <xhtml:a href="https://github.com/blongden/vnd.error">proposed media type</xhtml:a>
within the HAL community. Like HAL, it provides formats in both
JSON and XML, making it a nice cross-platform choice.</xhtml:p>
<xhtml:p>It differentiates from API-Problem in a few ways. First, it
allows, and even encourages, reporting collections of errors. If
you consider PHP exceptions and the fact that they support
"previous" exceptions, this is a powerful concept; you can report
the entire chain of errors that led to the response. Second, it
encourages pushing detail out of the web service; errors include a
"logRef" property that points to where the error detail lives. This
is probably better illustrated than explained.</xhtml:p>
<xhtml:p>The response payload is an array of objects. Each object has the
following members:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:strong>logRef</xhtml:strong>: a unique identifier for the specific
error which can then be used to identify the error within
server-side logs (required)</xhtml:li>
<xhtml:li><xhtml:strong>message</xhtml:strong>: the error message itself
(required)</xhtml:li>
<xhtml:li><xhtml:strong>_links</xhtml:strong>: HAL-compatible links. Typically,
"help", "describes", and/or "describedBy" relations will be defined
here.</xhtml:li>
</xhtml:ul>
<xhtml:p>As an example, let's consider the API-Problem example I had
earlier, and provide a vnd.error equivalent:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="http">
HTTP/1.1 500 Internal Error
Content-Type: application/vnd.error+json

[
    {
        "logRef": "someSha1HashMostLikely",
        "message": "Status failed validation",
        "_links": {
            "describedBy": {"href": "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"}
        }
    }
]
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>vnd.error basically begs you to create custom error types, with
documentation end-points that detail the source of the error and
what you can do about it (this is true of API-Problem as well).</xhtml:p>
<xhtml:p>The requirement to include a log reference ("logRef") and have
it be unique can be a stumbling block to implementation, however,
as it requires effort for uniquely identifying requests, and
logging. However, both the identification and logging can be
automated.</xhtml:p>
<xhtml:h2>Summary</xhtml:h2>
<xhtml:p>Error reporting in APIs is as important as the normal resource
payloads themselves. Without good error reporting, when an API
raises errors, clients have difficulty understanding what they can
do next, and cannot provide you, the API provider, with information
that will allow you to debug on the server side.</xhtml:p>
<xhtml:p>As noted at the beginning of the article, if you follow the
rules below, you'll make consumers of your API happier and more
productive.</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:strong>DO</xhtml:strong> use appropriate HTTP status codes to
indicate an error happened.</xhtml:li>
<xhtml:li>Report errors in a format I have indicated I will Accept (as in
the HTTP header).</xhtml:li>
<xhtml:li>Report errors consistently. Don't report the error one way one
time, and another way the next. Standardize on a specific
error-reporting media type . While you <xhtml:em>can</xhtml:em> create your own
error structure, I recommend using documented, accepted standards.
This will make clients more re-usable, and make many of your
decisions for you.</xhtml:li>
<xhtml:li>Provide detailed information as to what went wrong, and what
steps I may be able to take next. Provide documentation for each
type of error, and link to that documentation from your error
payloads.</xhtml:li>
</xhtml:ul>
<xhtml:p>Which brings me to...</xhtml:p>
<xhtml:h2>Next time</xhtml:h2>
<xhtml:p>I realize I still haven't covered anything specific to ZF2, but
I'll start next time, when I cover the next topic: documenting your
API. An undocumented API is a useless API, so it's good to start
baking documentation in immediately. I'll survey some of the
possibilities and how they can be implemented in ZF2 in the next
installment, and then we can get our hands dirty with actual API
development.</xhtml:p>
<xhtml:h3>Updates</xhtml:h3>
<xhtml:p><xhtml:em>Note: I'll update this post with links to the other posts in
the series as I publish them.</xhtml:em></xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2013-02-11-restful-apis-with-zf2-part-1">Part
1</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2013-02-25-restful-apis-with-zf2-part-3">Part
3</xhtml:a></xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[RESTful APIs with ZF2, Part 1]]></title>
    <published>2013-02-12T11:42:00+0000</published>
    <updated>2013-02-13T13:40:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2013-02-11-restful-apis-with-zf2-part-1.html"/>
    <id>http://mwop.net/blog/2013-02-11-restful-apis-with-zf2-part-1.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>RESTful APIs have been an interest of mine for a couple of
years, but due to <xhtml:a href="http://framework.zend.com/blog//zend-framework-2-0-0-stable-released.html">
circumstances</xhtml:a>, I've not had much chance to work with them in
any meaningful fashion until recently.</xhtml:p>
<xhtml:p><xhtml:a href="http://akrabat.com/">Rob Allen</xhtml:a> and I proposed a
workshop for <xhtml:a href="http://conference.phpbenelux.eu/2013/">PHP
Benelux 2013</xhtml:a> covering RESTful APIs with ZF2. When it was
accepted, it gave me the perfect opportunity to dive in and start
putting the various pieces together.</xhtml:p>
<xhtml:h2>Background</xhtml:h2>
<xhtml:p>I've attended any number of conference sessions on API design,
read countless articles, and engaged in quite a number of
conversations. Three facts keep cropping up:</xhtml:p>
<xhtml:ol>
<xhtml:li>JSON is fast becoming the preferred exchange format due to the
ease with which it de/serializes in almost every language.</xhtml:li>
<xhtml:li>The "holy grail" is <xhtml:a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Richardson
Maturity Model</xhtml:a> Level 3.</xhtml:li>
<xhtml:li>It's really hard to achieve RMM level 3 with JSON.</xhtml:li>
</xhtml:ol>
<xhtml:h3>Richardson Maturity Model</xhtml:h3>
<xhtml:p>As a quick review, the Richardson Maturity Model has the
following 4 levels:</xhtml:p>
<xhtml:ul>
<xhtml:li>Level 0: "The swamp of POX." Basically, a service that uses TCP
for transport, primarily as a form of remote procedure call (RPC).
Typically, these are not really leveraging HTTP in any meaningful
fashion; most systems will use HTTP POST for all interactions.
Also, you will often have a single endpoint for all interactions,
regardless of whether or not they are strictly related. XML-RPC,
SOAP, and JSON-RPC fall under this category.</xhtml:li>
<xhtml:li>Level 1: "Resources." In these services, you start breaking the
service into multiple services, one per "resource," or, in object
oriented terms, per object. This means a distinct URL per object,
which means each has its own distinct identity on the web; this
often extends not only to the collection of objects, but to
individual objects under the collection as well (e.g., "/books" as
well as "/books/life-of-pi"). The service may still be RPC in
nature, however, and, at this level, often is still using a single
HTTP method for all interactions with the resource.</xhtml:li>
<xhtml:li>Level 2: "HTTP Verbs." At this level, we start using HTTP verbs
with our services in the way the HTTP specification intends. GET is
for safe operations, and should be cacheable; POST is used for
creation and/or updating; DELETE can be used to delete a resource;
etc. Rather than doing RPC style methods, we leverage HTTP,
occasionally passing additional parameters via the query string or
request body. Considerations such as HTTP caching and idempotence
are taken into account.</xhtml:li>
<xhtml:li>Level 3: "Hypermedia Controls." Building on the previous level,
our resource representations now also include <xhtml:em>links</xhtml:em>, which
indicate what we can <xhtml:em>do next</xhtml:em>. At this level, our API
becomes practically self-describing; given a single end-point, we
should be able to start crawling it, using the links in a
representation to lead us to the next actions.</xhtml:li>
</xhtml:ul>
<xhtml:p>When I first started playing with web services around a decade
ago, everything was stuck at Level 0 or Level 1 -- usually with
Level 1 users downgrading to Level 0 because Level 0 offerred
consistency and predictability if you chose to use a service type
that had a defined envelope format (such as XML-RPC or SOAP). (I
even wrote the XML-RPC server implementation for Zend Framework
because I got sick of writing one-off parsers/serializers for
custom XML web service implementations. When you're implementing
many services, predictability is a huge win.)</xhtml:p>
<xhtml:p>A few years ago, I started seeing a trend towards Level 2. Web
developers like the simplicity of using HTTP verbs, as they map
very well to <xhtml:a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</xhtml:a>
operations -- the bread and butter of web development. Couple this
concept with JSON, and it becomes trivially simple to both create a
web service, as well as consume it.</xhtml:p>
<xhtml:p><xhtml:em>I'd argue that the majority of web developers are quite
happy to be at Level 2 -- and have no problem staying there.
They're productive, and the concepts are easy -- both to understand
and to implement.</xhtml:em></xhtml:p>
<xhtml:p>Level 3, though, is where it becomes really interesting. The
idea that I can examine the represention <xhtml:em>alone</xhtml:em> in order to
understand what I can do next is very intriguing and
empowering.</xhtml:p>
<xhtml:h3>JSON and Hypermedia</xhtml:h3>
<xhtml:p>With XML, hypermedia basically comes for free. Add some
&lt;link&gt; elements to your representation, and you're done --
and don't forget the link <xhtml:code>rel</xhtml:code>ations!</xhtml:p>
<xhtml:p>JSON, however, is another story.</xhtml:p>
<xhtml:p>Where do the links go? <xhtml:em>There is no single, defined way to
represent a hyperlink in JSON.</xhtml:em></xhtml:p>
<xhtml:p>Fortunately, there are some emerging standards.</xhtml:p>
<xhtml:p>First is use of the <xhtml:a href="http://www.w3.org/wiki/LinkHeader">"Link" HTTP header</xhtml:a>. While
the page I linked shows only a single link in the header, you can
have multiple links separated by commas. GitHub uses this when
providing pagination links in their API. Critics will point out
that the HTTP headers are not technically part of the
representation, however; strict interpetations of REST and RMM
indicate that the hypermedia links should be part of the resource
representation. Regardless, having the links in the HTTP headers is
useful for pre-traversal of a service, as you can perform HEAD
requests only to discover possible actions and workflows.</xhtml:p>
<xhtml:p><xhtml:a href="http://amundsen.com/media-types/collection/format/">Collection+JSON</xhtml:a>
is interesting, as it describes the entire JSON envelope. My one
criticism is that it details too much; whenever I see a format that
dictates how to describe types, I think of XML-RPC or SOAP, and get
a little twitchy. It's definitely worth a look, though.</xhtml:p>
<xhtml:p>What's captured my attention of late, however, is <xhtml:a href="http://stateless.co/hal_specification.html">Hypertext Application
Language</xhtml:a>, or HAL for short. HAL has very few rules, but
succinctly describes both how to provide hypermedia in JSON as well
as how to represent embedded resources - the two things that most
need standardized structure in JSON. It does this while still
providing a generic media type, and also describing a mirror image
XML format!</xhtml:p>
<xhtml:h3>HAL Media Types</xhtml:h3>
<xhtml:p>HAL defines two generic media types:
<xhtml:code>application/hal+xml</xhtml:code> and
<xhtml:code>application/hal+json</xhtml:code>. You will use these as the
response Content-Type, as they describe the response
representation; the client can simply request
<xhtml:code>application/json</xhtml:code>, and the response format remains
compatible.</xhtml:p>
<xhtml:h3>HAL and Links</xhtml:h3>
<xhtml:p>HAL provides a very simple structure for JSON hypermedia links.
First, all resource representations must contain hypermedia links,
and all links are provided in a "_links" object:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "_links": {
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Second, links are properties of this object. The property name
is the link relation, and the value is an object containing
minimally an "href" property.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "_links": {
        "self": {"href": "http://example.com/api/status/1234"}
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>If a given relation can have multiple links, you provide instead
an array of objects:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "_links": {
        "self": {"href": "http://example.com/api/status/1234"},
        "conversation": [
            {"href": "http://example.com/api/status/1237"},
            {"href": "http://example.com/api/status/1241"}
        ]
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Individual links can contain other attributes as desired -- I've
seen people include the relation again so that it's self-contained
in the link object, and it's not uncommon to include a title or
name.</xhtml:p>
<xhtml:h3>HAL and Resources</xhtml:h3>
<xhtml:p>HAL imposes no structure over resources other than requiring the
hypermedia links; even then, you typically do not include the
hypermedia links when making a request of the web service; the
hypermedia links are included only in the representations
<xhtml:em>returned</xhtml:em> by the service.</xhtml:p>
<xhtml:p>So, as an example, you would POST the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="http">
POST /api/status
Host: example.com
Accept: application/json
Content-Type: application/json

{
    "status": "This is my awesome status update!",
    "user": "mwop"
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>And from that request, you'd receive the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="http">
201 Created
Location: http://example.com/api/status/1347
Content-Type: application/hal+json

{
    "_links": {
        "self": {"href": "http://example.com/api/status/1347"}
    },
    "id": "1347",
    "timestamp": "2013-02-11 23:33:47",
    "status": "This is my awesome status update!",
    "user": "mwop"
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:h3>HAL and Embedded Resources</xhtml:h3>
<xhtml:p>The other important thing that HAL defines is how to
<xhtml:em>embed</xhtml:em> resources. Why is this important? If the resource
references other resources, you will want to be able to link to
them so you can perform operations on them, too.</xhtml:p>
<xhtml:p>Embedded resources are represented inside an "_embedded" object
of the representation, and, as resources, contain their own
"_links" object as well. Each resource you embed is assigned to a
property of that object, and if multiple objects of the same type
are returned, an array of resources is assigned. In fact, this
latter is how you represent <xhtml:em>collections</xhtml:em> in HAL.</xhtml:p>
<xhtml:p>Let's consider a simple example first. In previous code samples,
I have a "user" that's a string; let's make that an embedded
resource instead.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "_links": {
        "self": {"href": "http://example.com/api/status/1347"}
    },
    "id": "1347",
    "timestamp": "2013-02-11 23:33:47",
    "status": "This is my awesome status update!",
    "_embedded": {
        "user": {
            "_links": {
                "self": {"href": "http://example.com/api/user/mwop"}
            }
            "id": "mwop",
            "name": "Matthew Weier O'Phinney",
            "url": "http://mwop.net"
        }
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I've moved the "user" out of the representation, and into the
"_embedded" object -- because this is where you define embedded
resources. Note that the "user" is a standard HAL resource itself
-- containing hypermedia links.</xhtml:p>
<xhtml:p>Now let's look at a collection:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "_links": {
        "self": {"href": "http://example.com/api/status"},
        "next": {"href": "http://example.com/api/status?page=2"},
        "last": {"href": "http://example.com/api/status?page=100"}
    },
    "count": 2973,
    "per_page": 30,
    "page": 1,
    "_embedded": {
        "status": [
            {
                "_links": {
                    "self": {"href": "http://example.com/api/status/1347"}
                },
                "id": "1347",
                "timestamp": "2013-02-11 23:33:47",
                "status": "This is my awesome status update!",
                "_embedded": {
                    "user": {
                        "_links": {
                            "self": {"href": "http://example.com/api/user/mwop"}
                        }
                        "id": "mwop",
                        "name": "Matthew Weier O'Phinney",
                        "url": "http://mwop.net"
                    }
                }
            }
            /* ... */
        ]
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Note that the "status" property is an array; semantically, all
resources under this key are of the same type. Also note that the
parent resource has some additional link relations -- these are
related to pagination, and allow a client to determine what the
next and last pages are (and, if we were midway into the
collection, previous and first pages). Since the collection is also
a resource, it has some interesting metadata -- how many resources
are in the collection, how many we represent per page, and what the
current page is.</xhtml:p>
<xhtml:p>Also note that you can nest resources -- simply include an
"_embedded" object inside an embedded resource, with additional
resources, as I've done with the "user" resource inside the status
resource shown here. It's turtles all the way down.</xhtml:p>
<xhtml:h2>Next Time</xhtml:h2>
<xhtml:p>The title of this post indicates I'll be talking about building
RESTful APIs with ZF2 -- but so far, I've not said anything about
ZF2.</xhtml:p>
<xhtml:p>I'll get there. But there's another detour to take: reporting
errors.</xhtml:p>
<xhtml:h3>Updates</xhtml:h3>
<xhtml:p><xhtml:em>Note: I'll update this post with links to the other posts in
the series as I publish them.</xhtml:em></xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2013-02-13-restful-apis-with-zf2-part-2">Part
2</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2013-02-25-restful-apis-with-zf2-part-3">Part
3</xhtml:a></xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[OpenShift, Cron, and Naked Domains]]></title>
    <published>2012-12-30T15:52:00+0000</published>
    <updated>2012-12-30T15:52:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-12-30-openshift-cron-and-naked-domains.html"/>
    <id>http://mwop.net/blog/2012-12-30-openshift-cron-and-naked-domains.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>As an experiment, I migrated my website over to <xhtml:a href="http://openshift.redhat.com">OpenShift</xhtml:a> yesterday. I've been
hosting a pastebin there already, and have found the service to be
both straightforward and flexible; it was time to put it to a more
thorough test.</xhtml:p>
<xhtml:p>In the process, I ran into a number of interesting issues, some
of which took quite some time to resolve; this post is both to help
inform other potential users of the service, as well as act as a
reminder to myself.</xhtml:p>
<xhtml:h2>Cron</xhtml:h2>
<xhtml:p>OpenShift offers a <xhtml:a href="http://en.wikipedia.org/wiki/Cron">Cron</xhtml:a> cartridge, which I was
excited to try out.<xhtml:sup><xhtml:a href="#f1">1</xhtml:a></xhtml:sup></xhtml:p>
<xhtml:p>The basics are quite easy. In your repository's
<xhtml:code>.openshift</xhtml:code> directory is a <xhtml:code>cron</xhtml:code>
subdirectory, further divided into <xhtml:code>minutely</xhtml:code>,
<xhtml:code>hourly</xhtml:code>, <xhtml:code>daily</xhtml:code>, <xhtml:code>weekly</xhtml:code>, and
<xhtml:code>monthly</xhtml:code> subdirectories. You drop a script you want to
run into one of these directories, and push your changes
upstream.</xhtml:p>
<xhtml:p>The problem is: what if I want a job to run at a specific time
daily? or on the quarter hour? or on a specific day of the
week?</xhtml:p>
<xhtml:p>As it turns out, you can manage all of the above, just not quite
as succinctly as you would in a normal crontab. Here, for example,
is a script that I run at 5AM daily; I placed it in the
<xhtml:code>hourly</xhtml:code> directory so that it can test more
frequently:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
#!/bin/bash
if [ `date +%H` == "05" ]
then
    (
        export PHP=/usr/local/zend/bin/php ;
        cd $OPENSHIFT_REPO_DIR ; 
        $PHP public/index.php phlycomic fetch all ; 
        $PHP public/index.php phlysimplepage cache clear --page=pages/comics 
    )
fi
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>And here's one that runs on the quarter-hour, placed in the
<xhtml:code>minutely</xhtml:code> directory:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
#!/bin/bash
MINUTES=`date +%M`

for i in "00" "15" "30" "45";do
    if [ "$MINUTES" == "$i" ];then
        (
            export PHP=/usr/local/zend/bin/php ;
            cd $OPENSHIFT_REPO_DIR ;
            $PHP public/index.php githubfeed fetch 
        )
    fi
done
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The point is that if you need more specificity, push the script
into the next more specific directory, and test against the time of
execution.</xhtml:p>
<xhtml:h2>Naked Domains</xhtml:h2>
<xhtml:p>Naked domains are domains without a preceding subdomain. In my
case, this means "mwop.net", vs. "www.mwop.net".</xhtml:p>
<xhtml:p>The problem that cloud hosting presents is that the IP address
on which you are hosted can change at any time, for a variety of
reasons. As such, you typically cannot use DNS A records to point
to your domain; the recommendation is to use a CNAME record that
points the domain to a "virtual" domain registered with your cloud
hosting provider.</xhtml:p>
<xhtml:p>However, most domain registrars and DNS providers do not let you
do this for a naked domain, particularly if you also have MX or
other records associated with that naked domain.</xhtml:p>
<xhtml:p>Some registrars will allow you to forward the A record to a
subdomain. I tried this, but had limited success; I personally
found that I ended up in an infinite loop situation when doing the
DNS lookup.</xhtml:p>
<xhtml:p>Another solution is to have a redirect in place for your naked
domain to the subdomain, which can then be a CNAME record.
Typically, this would require you have a web server under your
control with a fixed IP that then simply redirects to the
subdomain. Fortunately, there's an easier solution: <xhtml:a href="http://wwwizer.com/naked-domain-redirect">wwwizer</xhtml:a>. You simply
point your naked domain A record to the wwwizer IP address, and
they will do a redirect to your <xhtml:code>www</xhtml:code> subdomain.</xhtml:p>
<xhtml:p>I implemented wwwizer on my domain (which is why you'll see
"www.mwop.net" in your location bar), and it's been working
flawlessly since doing so.</xhtml:p>
<xhtml:h4>Private repositories</xhtml:h4>
<xhtml:p>I keep my critical site settings in a private repository, which
allows me to version them while keeping the credentials they hold
out of the public eye. This means, however, that I need to use
<xhtml:a href="https://help.github.com/articles/managing-deploy-keys">GitHub
deploy keys</xhtml:a> on my server in order to retrieve changes.</xhtml:p>
<xhtml:p>This was simple enough: I created an <xhtml:code>ssh</xhtml:code>
subdirectory in my <xhtml:code>$OPENSHIFT_DATA_DIR</xhtml:code> directory, and
generated a new SSH keypair.</xhtml:p>
<xhtml:p>The problem was telling SSH to <xhtml:em>use</xhtml:em> this key when
fetching changes.</xhtml:p>
<xhtml:p>The solution is to use a combination of <xhtml:code>ssh-agent</xhtml:code>
and <xhtml:code>ssh-add</xhtml:code>, and it looks something like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
#!/bin/bash
ssh-agent `ssh-add $OPENSHIFT_DATA_DIR/ssh/github-key &amp;&amp; (
    cd $OPENSHIFT_DATA_DIR/config ; 
    git fetch origin ; 
    git rebase origin/mwop.net.config
)`
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>After testing the above, I put this in a <xhtml:code>pre_build</xhtml:code>
script in my OpenShift configuration so that I can autoupdate my
private configuration on each build. However, I discovered a new
problem: when a build is being done, the <xhtml:code>ssh-agent</xhtml:code> is
not available, which means the above cannot be executed. I'm still
trying to find a solution.</xhtml:p>
<xhtml:h2>Fin</xhtml:h2>
<xhtml:p>I'm pretty happy with the move. I don't have to do anything
special to automate deployment, and all my cronjobs and deployment
scripts are now self-contained in the repository, which makes my
site more portable. While a few things could use more
documentation, all the pieces are there and discoverable with a
small amount of work.</xhtml:p>
<xhtml:p>I'll likely give some other PaaS providers a try in the future,
but for the moment, I'm quite happy with the functionality and
flexibility of OpenShift.</xhtml:p>
<xhtml:h4>Footnotes</xhtml:h4>
<xhtml:ul>
<xhtml:li id="f1">Zend Server's JobQueue can also be used as a cron
replacement, but I was not keen on exposing the job functionality
via HTTP.</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On php-fig and Shared Interfaces]]></title>
    <published>2012-12-20T20:23:00+0000</published>
    <updated>2012-12-20T20:23:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-12-20-on-shared-interfaces.html"/>
    <id>http://mwop.net/blog/2012-12-20-on-shared-interfaces.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is a post I've been meaning to write for a long time, and
one requested of me personally by <xhtml:a href="http://www.rooftopsolutions.nl/blog/">Evert Pot</xhtml:a> during the
Dutch PHP Conference in June 2012. It details some observations I
have of php-fig, and hopefully will serve as a record of why I'm
not directly participating any longer.</xhtml:p>
<xhtml:p>I was a founding member of the <xhtml:a href="http://www.php-fig.org/">Framework Interoperability Group</xhtml:a>, now
called "php-fig". I was one of around a dozen folks who sat around
a table in 2009 in Chicago during php|tek and started discussions
about what we could all do to make it possible to work better
together between our projects, and make it simpler for users to
pick and choose from our projects in order to build the solutions
to their own problems.</xhtml:p>
<xhtml:p>The first "standard" that came from this was <xhtml:a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">
PSR-0</xhtml:a>, which promoted a standard class naming convention that
uses a 1:1 relationship between the namespace and/or vendor prefix
and the directory hierarchy, and the class name and the filename in
which it lives. To this day, there are both those who hail this as
a great step forward for cooperation, and simultaneously others who
feel it's a terrible practice.</xhtml:p>
<xhtml:p>And then nothing, for years. But a little over a year ago, there
was a new push by a number of folks wanting to do more. Paul Jones
did a remarkable job of spearheading the next <xhtml:a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">
two</xhtml:a> <xhtml:a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">
standards</xhtml:a>, which centered around coding style. Again, just like
with PSR-0, we had both those feeling it was a huge step forward,
and those who loathe the direction.</xhtml:p>
<xhtml:p>What was interesting, though, was that once we started seeing
some new energy and momentum, it seemed that <xhtml:em>everyone</xhtml:em>
wanted a say. And we started getting dozens of folks a week asking
to be voting members, and new proposal after new proposal. Whether
or not somebody likes an existing standard, they want to have
backing for a standard they propose.</xhtml:p>
<xhtml:p>And this is when we started seeing proposals surface for shared
interfaces, first around caching, and now around logging (though
the latter is the first up for vote).</xhtml:p>
<xhtml:h2>Shared Interfaces</xhtml:h2>
<xhtml:p>The idea around shared interfaces is simple: if we can come to a
consensus on the basic interface for a common application task,
libraries and frameworks can typehint on that shared interface,
allowing developers to drop in the implementation of their choosing
-- or even a standard, reference implementation. The goal is to
prevent Not Invented Here (NIH) syndrome, as well as to make it
simpler to re-use components between one library and another. As an
example, if you're using Framework A, and it has a caching library,
and you're consuming ORM B, you'd be able to pass the same cache
object to the ORM as you use in the framework.</xhtml:p>
<xhtml:p>Great goals, really.</xhtml:p>
<xhtml:p>But I'm not sure I buy into them.</xhtml:p>
<xhtml:h2>Problems</xhtml:h2>
<xhtml:p>First, I agree that NIH is a problem.</xhtml:p>
<xhtml:p>Second, I <xhtml:em>also</xhtml:em> think there's space for <xhtml:em>multiple
implementations</xhtml:em> of any given component. Often there are
different approaches that different authors will take: one might
focus on performance, another on having multiple adapters for
providing different capabilities, etc. Sometimes having a different
background will present different problem areas you want to
resolve. As such, having multiple implementations can be a very
good thing; developers can look at what each provides, and
determine which solves the particular issues presented in the
current project.</xhtml:p>
<xhtml:p>Because of this latter point, I have my reservations about
shared interfaces.</xhtml:p>
<xhtml:p>What if a particular approach requires deviating from the shared
interface in order to accomplish its goals? Additionally, in order
to keep the greatest amount of compatibility between projects,
shared interfaces tend to be so generic that specific
implementations require developers to do a ton of manual type
checking and munging of parameters, leading to more overhead, more
difficulty testing and maintaining, and more difficulty documenting
and understanding.</xhtml:p>
<xhtml:p>As an example, consider the following (made up) signature for a
log method:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
public function log($message, array $context = null);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>What if your library supports an idea of priorities? Where would
that information go in the above signature -- and would that differ
between libraries -- would one library use the key for a completely
different purpose? What about logging objects -- the signature
doesn't say you can't, but how would I know if a specific
implementation supports it, and won't blow up if I do pass one? Why
must the <xhtml:code>$context</xhtml:code> be an array -- why won't any
<xhtml:code>Traversable</xhtml:code> or <xhtml:code>ArrayAccess</xhtml:code> object
work?</xhtml:p>
<xhtml:p>Basically, by being overly generic, the signature becomes a
liability for those implementing the interface; it prevents
meaningful interoperability and leads to splintering
implementations.</xhtml:p>
<xhtml:p><xhtml:em>(Please note: the above is completely fictional and has no
bearing on current proposed or accepted standards. It is a thought
exercise only.)</xhtml:em></xhtml:p>
<xhtml:p>Furthermore, if a given project writes their own implementation
of a component, and it has specialized features, why would they
want to typehint on a generic, shared interface that doesn't
implement those features? This would be counter-intuitive, as the
project would then need to either check on additional interfaces
for the specialized capabilities, duck-type, etc. -- all of which
make for more maintenance and code.</xhtml:p>
<xhtml:p>In summary, my primary problem with the idea of shared
interfaces is that I feel there is always room for new thinking and
ideas in any given problem space, and that this thinking should not
be restricted by what already exists. Secondarily, I feel that it's
okay for a given project to be selective about what capabilities it
requires for its internal consumption and consistency, and should
not limit itself to a standardized interface.</xhtml:p>
<xhtml:h2>But, but, SHARING</xhtml:h2>
<xhtml:p><xhtml:em>Remember, the first point I made was that I think NIH is a
problem.</xhtml:em> How do I reconcile that with a firm stance against
shared interfaces?</xhtml:p>
<xhtml:p>Easy: <xhtml:a href="http://en.wikipedia.org/wiki/Bridge_pattern">bridges</xhtml:a> and/or
<xhtml:a href="http://en.wikipedia.org/wiki/Adapter_pattern">adapters</xhtml:a>.</xhtml:p>
<xhtml:p>Let's go back to that example of Framework A, its caching
library, and working with ORM B.</xhtml:p>
<xhtml:p>Let's assume that ORM B defines an interface for caching, and
let's say it looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
interface CacheInterface
{
    public function set($key, $data);
    public function has($key);
    public function get($key);
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Furthermore, we'll assume that the expected parameter values and
return types are documented.</xhtml:p>
<xhtml:p>What we as a consumer of both Framework A and ORM B can do is
build an <xhtml:em>implementation</xhtml:em> of <xhtml:code>CacheInterface</xhtml:code>
that accepts a cache instance from Framework A, and proxies the
various interface methods to that instance.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
class FrameworkACache implements CacheInterface
{
    protected $cache;

    public function __construct(Cache $cache)
    {
        $this-&gt;cache = $cache;
    }

    public function set($key, $data)
    {
        $item = new CacheItem($key, $data);
        $this-&gt;cache-&gt;setItem($item);
    }

    public function has($key)
    {
        return $this-&gt;cache-&gt;exists($key);
    }

    public function get($key)
    {
        $item = $this-&gt;cache-&gt;getItem($key);
        return $item-&gt;getData();
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Assuming your code is well-decoupled, and you're using some sort
of Inversion of Control container, you can likely create a factory
for your ORM that will grab the above class, with the cache
injected, and inject it into the ORM instance. Yes, it's a bit more
work, but it's difficult to question the end result: shared caching
between the framework and the ORM - and no need for shared
interfaces, nor any need to sacrifice features within the framework
or the ORM.</xhtml:p>
<xhtml:h2>Sharing is good, developing solutions is better</xhtml:h2>
<xhtml:p>I think the core idea of the php-fig group is sound: <xhtml:em>let's
all start thinking about how we can make it easier to operate with
each other</xhtml:em>. That said, my thoughts on how to accomplish that
goal have changed significantly, and boil down to:</xhtml:p>
<xhtml:ul>
<xhtml:li>Use naming conventions that will reduce collisions (i.e., use
per-project vendor prefixes/namespaces)</xhtml:li>
<xhtml:li>Use semantic versioning</xhtml:li>
<xhtml:li>Keep your installation packages segregated</xhtml:li>
<xhtml:li>Have a simple, discoverable way to autoload</xhtml:li>
<xhtml:li>Provide interfaces for anything that could benefit from
alternate implementations</xhtml:li>
<xhtml:li>Don't write code that has side-effects in the global namespace
(including altering PHP settings or superglobals)</xhtml:li>
</xhtml:ul>
<xhtml:p>Following these principals, you can play nice with each other,
while still fostering innovative and differentiating solutions to
shared problems.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[PHP Master Series on Day Camp For Developers]]></title>
    <published>2012-12-18T20:24:00+0000</published>
    <updated>2012-12-18T20:24:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-12-18-php-master-series.html"/>
    <id>http://mwop.net/blog/2012-12-18-php-master-series.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p><xhtml:a href="http://blog.calevans.com">Cal Evans</xhtml:a> has organized
another DayCamp4Developers event, this time entitled "<xhtml:a href="http://blog.calevans.com/2012/11/19/php-master-series-vol-1">PHP
Master Series, Volume 1</xhtml:a>". I'm honored to be an invited speaker
for this first edition, where I'll be presenting my talk,
"Designing Beautiful Software".</xhtml:p>
<xhtml:p>Why would you want to participate? Well, for one, because you
can interact directly with the various speakers during the
presentations. Sure, you can likely find the slide decks elsewhere,
or possibly even recordings. But if we all do our jobs right, we'll
likely raise more questions than answers; if you attend, you'll get
a chance to ask some of your questions immediately, <xhtml:em>and we may
even answer them!</xhtml:em></xhtml:p>
<xhtml:p>On top of that, this is a fantastic lineup of speakers, and,
frankly, not a lineup I've ever participated in. In a typical
conference, you'd likely see one or two of us, and be lucky if we
weren't scheduled against each other; if you attend this week,
you'll get to see us all, back-to-back.</xhtml:p>
<xhtml:p>What else will you be doing this Friday, anyways, while <xhtml:a href="http://en.wikipedia.org/wiki/2012_phenomenon">you wait for the end
of the world?</xhtml:a></xhtml:p>
<xhtml:p>So, do yourself a favor, and <xhtml:a href="http://phpmasterseriesv1.eventbrite.com/">register today</xhtml:a>!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[My ZendCon Beautiful Software Talk]]></title>
    <published>2012-11-17T13:53:00+0000</published>
    <updated>2012-11-17T13:53:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-17-zendcon-beautiful-software.html"/>
    <id>http://mwop.net/blog/2012-11-17-zendcon-beautiful-software.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Once again, I spoke at <xhtml:a href="http://www.zendcon.com/">ZendCon</xhtml:a> this year; in talking with
<xhtml:a href="http://twitter.com/chwenz">Christian Wenz</xhtml:a>, we're
pretty sure that the two of us and <xhtml:a href="http://andigutmans.blogspot.com">Andi</xhtml:a> are the only ones who
have spoken at all eight events.</xhtml:p>
<xhtml:p>Unusually for me, I did not speak on a Zend Framework topic, and
had only one regular slot (I also co-presented a Design Patterns
tutorial with my team). That slot, however, became one of my
favorite talks I've delivered: "Designing Beautiful Software". I've
given this talk a couple times before, but I completely rewrote it
for this conference in order to better convey my core message:
beautiful software is maintainable and extensible; writing software
is a craft.</xhtml:p>
<xhtml:p>I discovered today that not only was it recorded, but it's been
<xhtml:a href="http://youtu.be/mQsQ6QZ4dGg">posted on YouTube</xhtml:a>:</xhtml:p>
<xhtml:iframe width="420" height="315" src="http://www.youtube.com/embed/mQsQ6QZ4dGg" frameborder="0" allowfullscreen=""/>
<xhtml:p>I've also <xhtml:a href="/slides/2012-10-25-BeautifulSoftware/BeautifulSoftware.html">posted
the slides</xhtml:a>.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Server, ZF2, and Page Caching]]></title>
    <published>2012-11-05T21:25:00+0000</published>
    <updated>2012-11-05T21:25:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-05-zend-server-caching.html"/>
    <id>http://mwop.net/blog/2012-11-05-zend-server-caching.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Zend Server has a very cool <xhtml:a href="http://www.youtube.com/watch_v=i2XXn2SA5zM.html" target="_blank">Page Caching feature</xhtml:a>. Basically, you can provide URLs
or URL regular expressions, and tell Zend Server to provide
full-page caching of those pages. This can provide a tremendous
performance boost, without needing to change anything in your
application structure; simply enable it for a set of pages, and sit
back and relax.</xhtml:p>
<xhtml:p style="text-align: center;"><xhtml:img style="max-width: 100%; max-height: 100%;" src="/images/blog/2012-11-04-Server-CachingRule.png" alt="Zend Server Page Caching" title="Zend Server Page Caching"/></xhtml:p>
<xhtml:p>However, this feature is not entirely straight-forward when
using a framework that provides its own routing, such as ZF2. The
reason is because it assumes by default that each match maps to a
specific file on the filesystem, and prepares the caching based on
the actual <xhtml:em>file</xhtml:em> it hits. What this means for ZF2 and other
similar frameworks is that any page that matches will return the
cached version for the <xhtml:em>first</xhtml:em> match that also matches the
same <xhtml:em>file</xhtml:em> -- i.e., <xhtml:code>index.php</xhtml:code> in ZF2. That's
every page the framework handles. As an example, if I match on
<xhtml:code>/article/\d+</xhtml:code>, it matches this to the file
<xhtml:code>index.php</xhtml:code>, and then any other match that resolves to
<xhtml:code>index.php</xhtml:code> gets served that same page. Not handy.</xhtml:p>
<xhtml:p>The good part is that there's a way around this.</xhtml:p>
<xhtml:p>When creating or modifying a caching rule, simply look for the
text, "Create a separate cached page for each value of:" and click
the "Add Parameter" button. Select <xhtml:code>_SERVER</xhtml:code> from the
dropdown, and type <xhtml:code>[REQUEST_URI]</xhtml:code> for the value. Once
saved, each page that matches the pattern will be cached
separately.</xhtml:p>
<xhtml:p><xhtml:img style="max-width: 100%; max-height: 100%;" src="/images/blog/2012-11-04-Server-Caching-Request.png" alt="Zend Server Page Caching by Request" title="Zend Server Page Caching by Request"/></xhtml:p>
<xhtml:p>Note: the <xhtml:code>_SERVER</xhtml:code> key may vary based on what
environment/OS you're deployed in. Additionally, it may differ
based on how you define rewrite rules -- some frameworks and CMS
systems will append to the query string, for instance, in which
case you may want to select the "entire query string" parameter
instead of <xhtml:code>_SERVER</xhtml:code>; the point is, there's likely a way
for you to configure it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[OpenShift, ZF2, and Composer]]></title>
    <published>2012-11-01T20:25:00+0000</published>
    <updated>2012-11-01T20:25:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-01-openshift-zf2-composer.html"/>
    <id>http://mwop.net/blog/2012-11-01-openshift-zf2-composer.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I was recently shopping around for inexpensive cloud hosting; I
want to try out a couple of ideas that may or may not have much
traffic, but which aren't suited for my VPS setup (the excellent
<xhtml:a href="http://servergrove.com/">ServerGrove</xhtml:a>); additionally,
I'm unsure how long I will maintain these projects. My budget for
this is quite small as a result; I'm already paying for hosting,
and am quite happy with it, so this is really for experimental
stuff.</xhtml:p>
<xhtml:p>I considered Amazon, Orchestra.io, and a few others, but was
concerned about the idea of a ~$50/month cost for something I'm
uncertain about.</xhtml:p>
<xhtml:p>When I asked in <xhtml:a href="irc://irc.freenode.net/zftalk.dev">#zftalk.dev</xhtml:a>, someone
suggested <xhtml:a href="http://openshift.redhat.com/">OpenShift</xhtml:a> as
an idea, and coincidentally, the very next day <xhtml:a href="http://www.zend.com/en/company/news/press/379_red-hat-expands-openshift-ecosystem-with-zend-partnership-to-offer-professional-grade-environment-for-php-developers">
Zend announced a partnership with RedHat surrounding OpenShift</xhtml:a>.
The stars were in alignment.</xhtml:p>
<xhtml:p>In the past month, in the few spare moments I've had (which
included an excellent OpenShift hackathon at ZendCon), I've created
a quick application that I've deployed and tested in OpenShift.
These are my findings.</xhtml:p>
<xhtml:h2>ZF2</xhtml:h2>
<xhtml:p>I didn't really have to do anything different to have <xhtml:a href="http://framework.zend.com/">zf2</xhtml:a> work; the standard
<xhtml:code>.htaccess</xhtml:code> provided in the skeleton application worked
flawlessly the first time (I've worked with some cloud environments
where this is not the case).</xhtml:p>
<xhtml:p>The only frustration I had was the default directory structure
OpenShift foists upon us:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
data/
libs/
misc/
php/
</xhtml:pre></xhtml:div>
<xhtml:p>This is not terrible, by any stretch. However, it's attempting
to dictate the application structure, which I'm not terribly happy
with -- particularly as my structure may vary based on the
framework I'm using (or not!), and because I may already have a
project written that I simply want to deploy.</xhtml:p>
<xhtml:p>In particular, the <xhtml:code>php</xhtml:code> directory is galling -- it's
simply the document root. Most frameworks I've used or seen call
the equivalent directory <xhtml:code>public</xhtml:code>, or <xhtml:code>web</xhtml:code>,
or <xhtml:code>html</xhtml:code> -- but never <xhtml:code>php</xhtml:code> (in large part
because the only PHP file under the document root in most
frameworks is the <xhtml:code>index.php</xhtml:code> that acts as the front
controller). It would be nice if this were configurable.</xhtml:p>
<xhtml:p>This conflicts a bit with how a ZF2 app is structured. I ended
up doing the following:</xhtml:p>
<xhtml:ul>
<xhtml:li>Removed <xhtml:code>php</xhtml:code> and symlinked my <xhtml:code>public</xhtml:code>
directory to it.</xhtml:li>
<xhtml:li>Removed <xhtml:code>libs</xhtml:code> and symlinked my <xhtml:code>vendor</xhtml:code>
directory to it.</xhtml:li>
<xhtml:li>Removed <xhtml:code>misc</xhtml:code> as I had no need to it.</xhtml:li>
</xhtml:ul>
<xhtml:p>Nothing too big, thankfully -- but problematic from the
perspective of, "I've already developed this app, but now I have to
make changes for it to work on a specific cloud vendor."</xhtml:p>
<xhtml:h2>Composer</xhtml:h2>
<xhtml:p>My next question was how to use <xhtml:a href="http://getcomposer.org/">Composer</xhtml:a> during my deployment
process, and some some googling <xhtml:a href="https://openshift.redhat.com/community/content/support-for-git-clone-on-the-server-aka-support-php-composerphar">
found some answers for me</xhtml:a>.</xhtml:p>
<xhtml:p>Basically, I needed to create a <xhtml:code>deploy</xhtml:code> task that
does two things:</xhtml:p>
<xhtml:ul>
<xhtml:li>Unset the <xhtml:code>GIT_DIR</xhtml:code> environment variable. Evidently,
the build process operates as part of a git hook, and since
Composer often uses git repositories, this can lead to
problems.</xhtml:li>
<xhtml:li>Change directory to <xhtml:code>OPENSHIFT_REPO_DIR</xhtml:code>, which is
where the application root (not document root!) lives.</xhtml:li>
</xhtml:ul>
<xhtml:p>Once I did those, I could run my normal composer installation.
The <xhtml:code>deploy</xhtml:code> task looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
#!/bin/bash
# .openshift/action_hooks/deploy
( unset GIT_DIR ; cd $OPENSHIFT_REPO_DIR ; /usr/local/zend/bin/php composer.phar install )
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This leads into my next topic.</xhtml:p>
<xhtml:h2>Deployment</xhtml:h2>
<xhtml:p>First off, as you probably guessed from that last secton, there
<xhtml:strong>are</xhtml:strong> hooks for deployment -- it doesn't have to be
simply git. I like this, as I may have additional things I want to
do during deployment, such as retrieving and installing
site-specific configuration files, installing Composer-defined
dependencies (as already noted), etc.</xhtml:p>
<xhtml:p>Over all, this is pretty seamless, but it's not without issues.
I've been told that some of my issues are being worked on, so those
I won't bring up here. The ones that were a bit strange, and which
caught me by surprise, though, were:</xhtml:p>
<xhtml:ul>
<xhtml:li>Though the build process creates the site build from git, your
<xhtml:strong>submodules are not updated recursively</xhtml:strong>. This
tripped me up, as I was using <xhtml:a href="https://github.com/EvanDotPro/EdpMarkdown">EdpMarkdown</xhtml:a>, and
had installed it as a submodule. I ended up having to import it,
and its own submodule, directly into my project so that it would
work.</xhtml:li>
<xhtml:li>I installed the <xhtml:a href="http://www.mongodb.org/">MongoDB</xhtml:a>
cartridge. Ironically, it was not then enabled in Zend Server, and
I had to go do this. This should be turnkey.</xhtml:li>
<xhtml:li><xhtml:code>/usr/bin/php</xhtml:code> is not the same as
<xhtml:code>/usr/local/zend/bin/php</xhtml:code>. This makes no sense to me if
I've installed Zend Server as my base gear. Considering they're
different versions, this can be hugely misleading and lead to
errors. I understand there are reasons to have both -- so simply be
aware that if you use the Zend Server gear, your tasks likely
should use <xhtml:code>/usr/local/zend/bin/php</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h2>The good parts?</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://openshift.redhat.com/community/faq/i-have-deployed-my-app-but-i-don%E2%80%99t-like-telling-people-to-visit-myapp-myusernamerhcloudcom-how-c">
You can alias an application to a DNS CNAME</xhtml:a> -- meaning you can
point your domain name to your OpenShift applications.
Awesome!</xhtml:li>
<xhtml:li>Simplicity of adding capabilities, such as Mongo, MySQL, Cron,
and others. In most cases, this is simply a "click on the button"
and it's installed and available.</xhtml:li>
<xhtml:li><xhtml:a href="http://www.zend.com/en/products/server">Zend
Server</xhtml:a>. For most PHP extensions, I can turn them on or off with
a few mouse clicks. If I want page-level caching, I don't have to
do anything to my application; I can simply setup some rules in the
Zend Server interface and get on with it, and enjoy tremendous
boosts to performance. I used to enjoy taming and tuning servers;
most days anymore, I just want them to work.</xhtml:li>
<xhtml:li><xhtml:a href="https://openshift.redhat.com/community/developers/remote-access">SSH</xhtml:a>
access to the server, with a number of commands to which I've been
given <xhtml:code>sudoer</xhtml:code> access. If you're going to sandbox
somebody, this is a fantastic way to do it. Oh, also: SSH tunnels
to services like Mongo and MySQL just work (via the
<xhtml:code>rhc-port-forward</xhtml:code> command).</xhtml:li>
</xhtml:ul>
<xhtml:h2>Summary</xhtml:h2>
<xhtml:p>Over all, I'm quite pleased. While it took me a bit to find the
various incantations I needed, the service is quite flexible. For
my needs, considering I'm doing experimental stuff, the price can't
be beat (the current developer preview is free). Considering most
stuff I do will fall into this or the basic tier, and that most
cartridges do not end up counting against your alotment of gears,
the pricing ($0.05/hour) is extremely competitive.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
