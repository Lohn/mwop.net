<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: javascript :: phly, boy, phly</title>
  <updated>2013-12-03T15:50:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/javascript.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/javascript-atom.xml"/>
  <id>http://mwop.net/blog/tag/javascript.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[A Bower Primer]]></title>
    <published>2013-12-03T15:50:00+0000</published>
    <updated>2013-12-03T15:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2013-12-03-bower-primer.html"/>
    <id>http://mwop.net/blog/2013-12-03-bower-primer.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Recently, I've been doing a fair bit of frontend development
with my team as we've worked on the <xhtml:a href="http://apigility.org/">Apigility</xhtml:a> admin. This has meant working
with a variety of both JavaScript and CSS libraries, often trying
something out only to toss it out again later. Working with
frontend libraries has been quite a hassle, due to a combination of
discovery, installation issues, and build issues (minimization,
primarily). I figured there must a better way.</xhtml:p>
<xhtml:h2>Background</xhtml:h2>
<xhtml:p>Until recently, discovery of JS and CSS libraries has gone
something like this:</xhtml:p>
<xhtml:ol>
<xhtml:li>Search for functionality via Google</xhtml:li>
<xhtml:li>Generally find a solution on StackOverflow</xhtml:li>
<xhtml:li>Discover said solution relies on a third-party library</xhtml:li>
<xhtml:li>Google for said library</xhtml:li>
<xhtml:li>Generally find said library on GitHub</xhtml:li>
<xhtml:li>Clone the library locally</xhtml:li>
<xhtml:li>Either build the final assets, or try and locate them in the
repo</xhtml:li>
<xhtml:li>Minimize the assets</xhtml:li>
<xhtml:li>Copy the assets into the project</xhtml:li>
</xhtml:ol>
<xhtml:p>Frontend development sucks.</xhtml:p>
<xhtml:p>Then I started noticing these files called <xhtml:code>.bowerrc</xhtml:code>
and <xhtml:code>bower.json</xhtml:code> in many of the aforementioned
libraries, and also that <xhtml:a href="http://ralphschindler.com/">Ralph</xhtml:a> had put some inside our
Apigility skeleton. I got curious as to what this "bower" might
be.</xhtml:p>
<xhtml:h2>Bower: Package management for the web</xhtml:h2>
<xhtml:p>Essentially, <xhtml:a href="http://bower.io/">Bower</xhtml:a> is, to use the
project's words, "a package manager for the web." Written in
JavaScript, and running on <xhtml:a href="http://nodejs.org/">node.js</xhtml:a>, it is to frontend assets what
<xhtml:a href="https://npmjs.org/">npm</xhtml:a> is to node, or <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> is to PHP. It allows you to
define what assets you need in your application, including the
versions, and then install them. If any of those assets have other
dependencies, those, too, will be installed.</xhtml:p>
<xhtml:p>Later, you can update the dependencies, add or remove
dependencies, and more.</xhtml:p>
<xhtml:p>On top of that, bower allows you to <xhtml:em>search</xhtml:em> for
packages, which essentially allows you to eliminate most of the
steps 4 and on in my list above.</xhtml:p>
<xhtml:h2>A Bower Primer</xhtml:h2>
<xhtml:p>So, how do you use bower?</xhtml:p>
<xhtml:p>In my experience, which is not extensive by any stretch, the
usage is like this:</xhtml:p>
<xhtml:ol>
<xhtml:li>Search for functionality via Google</xhtml:li>
<xhtml:li>Generally find a solution on StackOverflow</xhtml:li>
<xhtml:li>Discover said solution relies on a third-party library</xhtml:li>
<xhtml:li>Use bower to search for said library</xhtml:li>
<xhtml:li>Add the discovered library to your <xhtml:code>bower.json</xhtml:code>
file</xhtml:li>
<xhtml:li>Run <xhtml:code>bower install</xhtml:code> or <xhtml:code>bower
update</xhtml:code></xhtml:li>
</xhtml:ol>
<xhtml:p>I've found that most projects registered with bower have
minimized builds available (as well as the full source build),
which is a huge boon in terms of performance. It also eliminates
the "minimize the assets" step from my original list.</xhtml:p>
<xhtml:p>To use bower, you'll need two files. The first is
<xhtml:code>.bowerrc</xhtml:code> which goes in your project root; you'll run
<xhtml:code>bower</xhtml:code> from this same directory. This file tells bower
how to run, and where to install things, and, despite being an RC
file, is written in JSON. Mine usually looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "directory": "public/assets/vendor"
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The above tells bower to install dependencies in the
<xhtml:code>public/assets/vendor</xhtml:code> subdirectory.</xhtml:p>
<xhtml:p>The second file you need is <xhtml:code>bower.json</xhtml:code>. This file
tells bower what asset packages you want to install, and the
preferred version. (The file can also be used to define a package,
just like with Composer or npm.) As an example, the following is a
definition I used for an Apigility example:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="javascript">
{
    "name": "ag-contacts-demo",
    "version": "0.0.1",
    "ignore": [
        "**/.*"
    ],
    "dependencies": {
        "angular": "~1.2",
        "angular-resource": "~1.2",
        "angular-route": "~1.2",
        "bootstrap": "&gt;=3.0.0",
        "font-awesome": "~3.2.1"
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Bower requires that packages use <xhtml:a href="http://semver.org/">Semantic Versioning</xhtml:a>. You can specify exact
versions, minor versions, or major versions, combine them with
comparison operators (<xhtml:code>&lt;</xhtml:code>, <xhtml:code>&gt;</xhtml:code>,
<xhtml:code>=</xhtml:code>, etc.), or use the "next significant release"
operator ("~") to indicate a given version up to the next more
general release (e.g., "~1.2" is equivalent to
"&gt;=1.2,&lt;2.0").</xhtml:p>
<xhtml:p>Once you have these defined, you should also add an entry to
your <xhtml:code>.gitignore</xhtml:code> file to exclude the directory you list
in your <xhtml:code>.bowerrc</xhtml:code>; these files can be installed at
build time, and thus help you keep your project repository lean.
Per the above example:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="text">
public/assets/vendor/
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>At this point, run <xhtml:code>bower install</xhtml:code>, and bower will
resolve all dependencies and install them where you want.</xhtml:p>
<xhtml:p>At any point, you can list what packages bower has installed, as
well as the versions it has installed. The <xhtml:code>bower help</xhtml:code>
command is your friend should those needs arise.</xhtml:p>
<xhtml:h2>Closing Thoughts</xhtml:h2>
<xhtml:p>I'm quite happy with the various tools emerging to make modern
web development easier by allowing developers to more easily share
their work, as well as ensure that all dependencies are easily
installable. Bower is another tool in my arsenal as a web
developer, giving me a consistent set of dependency management
tools from my server-side development all the way to my client-side
application.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
