<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: testing :: phly, boy, phly</title>
  <updated>2014-08-21T19:30:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/testing.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/testing-atom.xml"/>
  <id>http://mwop.net/blog/tag/testing.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Testing Code That Emits Output]]></title>
    <published>2014-08-21T19:30:00+0000</published>
    <updated>2014-08-21T19:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-08-11-testing-output-generating-code.html"/>
    <id>http://mwop.net/blog/2014-08-11-testing-output-generating-code.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Here's the scenario: you have code that will emit headers and
content, for instance, a front controller. How do you test
this?</xhtml:p>
<xhtml:p>The answer is remarkably simple, but non-obvious:
namespaces.</xhtml:p>
<xhtml:h2>Prerequisites</xhtml:h2>
<xhtml:p>For this approach to work, the assumptions are:</xhtml:p>
<xhtml:ul>
<xhtml:li>Your code emitting headers and output lives in a namespace
other than the global namespace.</xhtml:li>
</xhtml:ul>
<xhtml:p>That's it. Considering that most PHP code you grab anymore does
this, and most coding standards you run across will require this,
it's a safe bet that you're already ready. If you're not, go
refactor your code now, before continuing; you'll thank me
later.</xhtml:p>
<xhtml:h2>The technique</xhtml:h2>
<xhtml:p>PHP introduced namespaces in PHP 5.3. Namespaces cover classes,
as most of us are well aware, but they also cover constants and
functions -- a fact often overlooked, as before 5.6 (releasing next
week!), you cannot import them via <xhtml:kbd>use</xhtml:kbd> statements!</xhtml:p>
<xhtml:p>That does not mean they cannot be defined and used, however --
it just means that you need to manually import them, typically via
a <xhtml:kbd>require</xhtml:kbd> or <xhtml:kbd>require_once</xhtml:kbd> statement. These
are usually anathema in libraries, but for testing, they work just
fine.</xhtml:p>
<xhtml:p>Here's an approach I took recently. I created a file that lives
-- this is the important bit, so pay attention -- <xhtml:em>in the same
namespace as the code emitting headers and output</xhtml:em>. This file
defines several functions that live in the global (aka PHP's
built-in) namespace, and an accumulator static object I can then
use in my tests for assertions. Here's what it looks like:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace Some\Project;

abstract class Output
{
    public static $headers = array();
    public static $body;

    public static function reset()
    {
        self::$headers = array();
        self::$body = null;
    }
}

function headers_sent()
{
    return false;
}

function header($value)
{
    Output::$headers[] = $value;
}

function printf($text)
{
    Output::$body .= $text;
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>A few notes:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:kbd>headers_sent()</xhtml:kbd> always returns <xhtml:kbd>false</xhtml:kbd> here,
as most emitters test for a boolean <xhtml:kbd>true</xhtml:kbd> value and bail
early when that occurs.</xhtml:li>
<xhtml:li>I used <xhtml:kbd>printf()</xhtml:kbd> here, as <xhtml:kbd>echo</xhtml:kbd> cannot be
overridden due to being a PHP language construct and not an actual
function. As such, if you use this technique, you will have to
likely alter your emitter to call <xhtml:kbd>printf()</xhtml:kbd> instead of
<xhtml:kbd>echo</xhtml:kbd>. The benefits, however, are worth it.</xhtml:li>
<xhtml:li>I marked <xhtml:kbd>Output</xhtml:kbd> abstract, to prevent instantiation;
it should only be used statically.</xhtml:li>
</xhtml:ul>
<xhtml:p>I place the above file within my test suite, usually under a
"TestAsset" directory adjacent to the test itself; since it
contains functions, I'll name the file "Functions.php" as well.
This combination typically will prevent it from being autoloaded in
any way, as the test directory will often not have autoloading
defined, or will be under a separate namespace.</xhtml:p>
<xhtml:p>Inside your PHPUnit test suite, then, you would do the
following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace SomeTest\Project;

use PHPUnit_Framework_TestCase as TestCase;
use Some\Project\FrontController;
use Some\Project\Output;                 // &lt;-- our Output class from above
require_once __DIR__ . '/TestAsset/Functions.php'; // &lt;-- get our functions

class FrontControllerTest extends TestCase
{
    public function setUp()
    {
        Output::reset();
        /* ... */
    }

    public function tearDown()
    {
        Output::reset();
        /* ... */
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>From here, you test as normal -- but when you invoke methods
that will cause headers or content to emit, you can now test to see
what those contain:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
public function testEmitsExpectedHeadersAndContent()
{
    /* ... */

    $this-&gt;assertContains('Content-Type: application/json', Output::$headers);
    $json = Output::$body;
    $data = json_decode($json, true);
    $this-&gt;assertArrayHasKey('foo', $data);
    $this-&gt;assertEquals('bar', $data['foo']);
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:h2>How it works</xhtml:h2>
<xhtml:p>Why does this work?</xhtml:p>
<xhtml:p>PHP performs some magic when it resolves functions. With
classes, it looks for a matching class either in the current
namespace, or one that was imported (and potentially aliased); if a
match is not found, it stops, and raises an error. With functions,
however, it looks first in the current namespace, and if it isn't
found, then looks in the global namespace. This last part is key --
it means that if you redefine a function in the current namespace,
it will be used in lieu of the original function defined by PHP.
This also means that any code operating in the same namespace as
the function -- even if defined in another file -- will use that
function.</xhtml:p>
<xhtml:p>This technique just leverages this fact.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Setting up your Zend_Test test suites]]></title>
    <published>2008-09-11T19:00:00+0000</published>
    <updated>2008-09-13T13:37:40+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html"/>
    <id>http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Now that <xhtml:a href="http://framework.zend.com/manual/en/zend.test.html">Zend_Test</xhtml:a>
has shipped, developers are of course asking, "How do I setup my
test suite?" Fortunately, after some discussion with my colleagues
and a little experimenting on my one, I can answer that now.</xhtml:p>
<xhtml:p><xhtml:a href="http://phpunit.de">PHPUnit</xhtml:a> offers a variety of
methods for setting up test suites, some trivial and some complex.
The Zend Framework test suite, for instance, goes for a more
complex route, adding component-level suites that require a fair
amount of initial setup, but which allow us fairly fine-grained
control.</xhtml:p>
<xhtml:p>However, testing and test automation should be easy and the
complex approach is overkill for most of our applications.
Fortunately, PHPUnit offers some other methods that make doing so
relatively simple. The easiest method is to use an <xhtml:a href="http://www.phpunit.de/pocket_guide/3.2/en/appendixes.configuration.html">
XML configuration file</xhtml:a>.</xhtml:p>
<xhtml:p>As an example, consider the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="xml" xml:lang="xml">
&lt;phpunit&gt;
    &lt;testsuite name=\"My Test Suite\"&gt;
        &lt;directory&gt;./&lt;/directory&gt;
    &lt;/testsuite&gt;

    &lt;filter&gt;
        &lt;whitelist&gt;
            &lt;directory suffix=\".php\"&gt;../library/&lt;/directory&gt;
            &lt;directory suffix=\".php\"&gt;../application/&lt;/directory&gt;
            &lt;exclude&gt;
                &lt;directory suffix=\".phtml\"&gt;../application/&lt;/directory&gt;
            &lt;/exclude&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;

    &lt;logging&gt;
        &lt;log type=\"coverage-html\" target=\"./log/report\" charset=\"UTF-8\"
            yui=\"true\" highlight=\"true\"
            lowUpperBound=\"50\" highLowerBound=\"80\"/&gt;
        &lt;log type=\"testdox-html\" target=\"./log/testdox.html\" /&gt;
    &lt;/logging&gt;
&lt;/phpunit&gt;
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>First thing to note, relative paths are relative to the
configuration file. This allows you to run your tests from anywhere
in your tests tree, Second, providing a <xhtml:code>directory</xhtml:code>
directive to the <xhtml:code>testsuite</xhtml:code> directive scans for all
files ending in "Test.php" in that directory, meaning you don't
have to keep a list of your test cases manually. It's a great way
to automate the suite. Third, the filter directive allows us to
determine what classes to include and/or exclude from coverage
reports. Finally, the <xhtml:code>logging</xhtml:code> directive lets us
specify what kinds of logs to create and where.</xhtml:p>
<xhtml:p>Drop the above into "tests/phpunit.xml" in your application, and
you can start writing test cases and running the suite immediately,
using the following command:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="text" xml:lang="text">
% phpunit --configuration phpunit.xml
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I like to group my test cases by type. I have controllers,
models, and often library code, and need to keep the tests
organized both on the filesystem as well as for running the actual
tests. There are two things I do to facilitate this.</xhtml:p>
<xhtml:p>First, I create directories. For instance, I have the following
hierarchy in my test suite:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="text" xml:lang="text">
tests/
    phpunit.xml
    TestHelper.php
    controllers/
        IndexControllerTest.php (contains IndexControllerTest)
        ErrorControllerTest.php (contains ErrorControllerTest)
        ...
    models/
        PasteTest.php           (contains PasteTest)
        DbTable/
            PasteTest.php       (contains DbTable_PasteTest)
        ...
    My/
        Form/
            Element/
                SimpleTextareaTest.php
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>"controllers/" contains my controllers, "models/" contains my
models. If I were developing a modular application, I'd have
something like "blog/controllers/" instead. Library code is given
the same hierarchy as is found in my "library/" directory.</xhtml:p>
<xhtml:p>Second, I use docblock annotations to group my tests. I add the
following to my class-level docblock in my controller test
cases:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
/**
 * @group Controllers
 */
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Models get the annotation "@group Models", etc. This allows me
to run individual sets of tests on demand:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="text" xml:lang="text">
% phpunit --configuration phpunit.xml --group Controllers
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You can specify multiple @group annotations, which means you can
separate tests into modules, issue report identifiers, etc;
additionally, you can add the annotations to individual test
methods themselves to have really fine-grained test running
capabilities.</xhtml:p>
<xhtml:p>Astute readers will have noticed the "TestHelper.php" file in
that directory listing earlier, and will be wondering what that's
all about.</xhtml:p>
<xhtml:p>A test suite needs some environmental information, just like
your application does. It may need a default database adapter,
altered include_paths, autoloading set up, and more. Here's what my
TestHelper.php looks like:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?php
/*
 * Start output buffering
 */
ob_start();

/*
 * Set error reporting to the level to which code must comply.
 */
error_reporting( E_ALL | E_STRICT );

/*
 * Set default timezone
 */
date_default_timezone_set('GMT');

/*
 * Testing environment
 */
define('APPLICATION_ENV', 'testing');

/*
 * Determine the root, library, tests, and models directories
 */
$root        = realpath(dirname(__FILE__) . '/../');
$library     = $root . '/library';
$tests       = $root . '/tests';
$models      = $root . '/application/models';
$controllers = $root . '/application/controllers';

/*
 * Prepend the library/, tests/, and models/ directories to the
 * include_path. This allows the tests to run out of the box.
 */
$path = array(
    $models,
    $library,
    $tests,
    get_include_path()
);
set_include_path(implode(PATH_SEPARATOR, $path));

/**
 * Register autoloader
 */
require_once 'Zend/Loader.php';
Zend_Loader::registerAutoload();

/**
 * Store application root in registry
 */
Zend_Registry::set('testRoot', $root);
Zend_Registry::set('testBootstrap', $root . '/application/bootstrap.php');

/*
 * Unset global variables that are no longer needed.
 */
unset($root, $library, $models, $controllers, $tests, $path);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The above ensures that my APPLICATION_ENV constant is set
appropriately, that error reporting is appropriate for tests (i.e.,
I want to see <xhtml:em>all</xhtml:em> errors), and that autoloading is
enabled. Additionally, I place a couple items in my registry -- the
bootstrap and test root directory.</xhtml:p>
<xhtml:p>In each test case file, I then do a require_once on this file.
In future versions of PHPUnit, you'll be able to specify a
bootstrap file in your configuration XML that gets pulled in for
each test case, and you'll be able to even further automate your
testing environment setup.</xhtml:p>
<xhtml:p>Hopefully this will get you started with your application
testing; what are you waiting for?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
