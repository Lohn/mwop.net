<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: programming :: phly, boy, phly</title>
  <updated>2014-09-04T13:30:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/programming.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/programming-atom.xml"/>
  <id>http://mwop.net/blog/tag/programming.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Deployment with Zend Server (Part 4 of 8)]]></title>
    <published>2014-09-04T13:30:00+0000</published>
    <updated>2014-09-04T13:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-09-04-zend-server-deployment-part-4.html"/>
    <id>http://mwop.net/blog/2014-09-04-zend-server-deployment-part-4.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is the fourth in a series of eight posts detailing tips on
deploying to Zend Server. <xhtml:a href="/blog/2014-09-02-zend-server-deployment-part-3.html">The previous
post in the series</xhtml:a> detailed a trick I learned about when to
execute a <xhtml:kbd>chmod</xhtml:kbd> statement during deployment.</xhtml:p>
<xhtml:p>Today, I'm sharing a tip about securing your Job Queue job
scripts.</xhtml:p>
<xhtml:h2>Tip 4: Secure your job scripts</xhtml:h2>
<xhtml:p>In the <xhtml:a href="/blog/2014-08-28-zend-server-deployment-part-2.html">second
tip</xhtml:a>, I detailed <xhtml:em>when</xhtml:em> to register job scripts, but not
how to write them. As it turns out, there's one very important
facet to consider when writing job scripts: security.</xhtml:p>
<xhtml:p>One issue with Job Queue is that jobs are triggered... via the
web. This means that they are exposed via the web, which makes them
potential attack vectors. However, there's a simple trick to
prevent access other than from Job Queue; add this at the top of
your job scripts:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
if (! ZendJobQueue::getCurrentJobId()) {
    header('HTTP/1.1 403 Forbidden');
    exit(1);
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>While the jobs are invoked via HTTP, Zend Server has ways of
tracking whether or not they are being executed in the context of
Job Queue, and for which job. If the
<xhtml:code>ZendJobQueue::getCurrentJobId()</xhtml:code> returns a falsy value,
then it was not invoked via Job Queue, and you can exit
immediately. I like to set a 403 status in these situations as
well, but that's just a personal preference.</xhtml:p>
<xhtml:h2>Next time...</xhtml:h2>
<xhtml:p>The next tip in the series is builds on this one, and gives some
best practices to follow when writing your job scripts.</xhtml:p>
<xhtml:h2>Other articles in the series</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2014-08-11-zend-server-deployment-part-1.html">Tip 1:
zf-deploy</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-08-28-zend-server-deployment-part-2.html">Tip 2:
Recurring Jobs</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-02-zend-server-deployment-part-3.html">Tip 3:
chmod</xhtml:a></xhtml:li>
</xhtml:ul>
I will update this post to link to each article as it releases.</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Deployment with Zend Server (Part 3 of 8)]]></title>
    <published>2014-09-02T13:30:00+0000</published>
    <updated>2014-09-04T13:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-09-02-zend-server-deployment-part-3.html"/>
    <id>http://mwop.net/blog/2014-09-02-zend-server-deployment-part-3.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is the third in a series of eight posts detailing tips on
deploying to Zend Server. <xhtml:a href="/blog/2014-08-28-zend-server-deployment-part-2.html">The previous
post in the series</xhtml:a> detailed creating recurring jobs via Zend
Job Queue, Ã  la cronjobs.</xhtml:p>
<xhtml:p>Today, I'm sharing a very short deployment script tip learned by
experience.</xhtml:p>
<xhtml:h2>Tip 3: chmod</xhtml:h2>
<xhtml:p>In the <xhtml:a href="/blog/2014-08-11-zend-server-deployment-part-1.html">first
tip</xhtml:a>, I detailed writing deployment scripts. One of the snippets
I shared was a <xhtml:kbd>chmod</xhtml:kbd> routine:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$command = 'chmod -R a+rwX ./data';
echo "\nExecuting `$command`\n";
system($command);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The code is fine; what I did not share is <xhtml:em>where</xhtml:em> in the
deployment script you should invoke it. As I discovered from
experience, this is key.</xhtml:p>
<xhtml:p>Zend Server's deployment scripts run as the <xhtml:kbd>zend</xhtml:kbd>
user. If they are writing any data to the <xhtml:kbd>data</xhtml:kbd>
directory, that data is owned by the <xhtml:kbd>zend</xhtml:kbd> user and group
-- and often will not be writable by the web server user. If you
have scheduled jobs that need to write to the same files, they will
fail... unless you have done the <xhtml:kbd>chmod</xhtml:kbd> after your
deployment tasks are done.</xhtml:p>
<xhtml:p>So, that's today's tip: if you need any directory in your
application to be writable by scheduled jobs, which will run as the
web server user, make sure you do your <xhtml:kbd>chmod</xhtml:kbd> as the last
step of your deployment script.</xhtml:p>
<xhtml:h2>Next time...</xhtml:h2>
<xhtml:p>The next tip in the series is another short one, and will detail
how to secure your Job Queue job scripts.</xhtml:p>
<xhtml:h2>Other articles in the series</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2014-08-11-zend-server-deployment-part-1.html">Tip 1:
zf-deploy</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-08-28-zend-server-deployment-part-2.html">Tip 2:
Recurring Jobs</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-04-zend-server-deployment-part-4.html">Tip 4: Secure
your job scripts</xhtml:a></xhtml:li>
</xhtml:ul>
I will update this post to link to each article as it releases.</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Deployment with Zend Server (Part 2 of 8)]]></title>
    <published>2014-08-28T13:30:00+0000</published>
    <updated>2014-09-04T13:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-08-28-zend-server-deployment-part-2.html"/>
    <id>http://mwop.net/blog/2014-08-28-zend-server-deployment-part-2.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This is the second in a series of eight posts detailing tips on
deploying to Zend Server. <xhtml:a href="/blog/2014-08-11-zend-server-deployment-part-1.html">The previous
post in the series</xhtml:a> detailed getting started with <xhtml:a href="http://www.zend.com/en/solutions/cloud-solutions/aws-marketplace">Zend
Server on the AWS marketplace</xhtml:a> and using <xhtml:a href="https://github.com/zfcampus/zf-deploy">zf-deploy</xhtml:a> to create ZPK
packages to deploy to Zend Server.</xhtml:p>
<xhtml:p>Today, I'm looking at how to created scheduled/recurring jobs
using Zend Server's Job Queue; think of this as application-level
cronjobs.</xhtml:p>
<xhtml:h2>Tip 2: Recurring Jobs</xhtml:h2>
<xhtml:p>I needed to define a few recurring jobs on the server. In the
past, I've used <xhtml:kbd>cron</xhtml:kbd> for this, but I've recently had a
slight change of mind on this: if I use <xhtml:kbd>cron</xhtml:kbd>, I have to
assume I'm running on a unix-like system, and have some sort of
system access to the server. If I have multiple servers running,
that means ensuring they're setup on each server. It seems better
to be able to define these jobs at the applicaton level.</xhtml:p>
<xhtml:p>Since Zend Server comes with Job Queue, I decided to try it out
for scheduling recurring jobs. This is not terribly intuitive,
however. The UI allows you to define scheduled jobs... but only
gives options for every minute, hour, day, week, and month, without
allowing you to specify the exact interval (e.g., every day at
20:00).</xhtml:p>
<xhtml:p>The PHP API, however, makes this easy. I can create a job as
follows:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$queue = new ZendJobQueue();
$queue-&gt;createHttpJob('/jobs/github-feed.php', [], [
  'name'       =&gt; 'github-feed',
  'persistent' =&gt; false,
  'schedule'   =&gt; '5,20,35,40 * * * *',
]);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Essentially, you provide a URL to the script to execute (Job
Queue "runs" a job by accessing a URL on the server), and provide a
schedule in crontab format. I like to give my jobs names as well,
as it allows me to search for them in the UI, and also enables
linking between the rules and the logs in the UI. Marking them as
<xhtml:em>not</xhtml:em> persistent ensures that if the job is successful, it
will be removed from the events list.</xhtml:p>
<xhtml:p>The question is, where do you define this? I decided to do this
in my <xhtml:kbd>post_activate.php</xhtml:kbd> deployment script. However, this
raises two new problems:</xhtml:p>
<xhtml:ul>
<xhtml:li>Rules need not just a path to the script, but also the scheme
and host. You _can_ omit those, but only if the script can resolve
them via <xhtml:kbd>$_SERVER</xhtml:kbd>... which it cannot due during
deployment.</xhtml:li>
<xhtml:li>Each deployment adds the jobs you define... but this does not
overwrite or remove the jobs you added in previous
deployments.</xhtml:li>
</xhtml:ul>
<xhtml:p>I solved these as follows:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$server = 'http://mwop.net';

// Remove previously scheduled jobs:
$queue = new ZendJobQueue();
foreach ($queue-&gt;getSchedulingRules() as $job) {
    if (0 !== strpos($job['script'], $server)) {
        // not one we're interested in
        continue;
    }

    // Remove previously scheduled job
    $queue-&gt;deleteSchedulingRule($job['id']);
}

$queue-&gt;createHttpJob($server . '/jobs/github-feed.php', [], [
  'name'       =&gt; 'github-feed',
  'persistent' =&gt; false,
  'schedule'   =&gt; '5,20,35,40 * * * *',
]);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>So, in summary:</xhtml:p>
<xhtml:ul>
<xhtml:li>Define your rules with names.</xhtml:li>
<xhtml:li>Define recurring rules using the <xhtml:kbd>schedule</xhtml:kbd>
option.</xhtml:li>
<xhtml:li>Define recurring rules in your deployment script, during
<xhtml:kbd>post_activate</xhtml:kbd>.</xhtml:li>
<xhtml:li>Remove previously defined rules in your deployment script,
prior to defining them.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Next time...</xhtml:h2>
<xhtml:p>The next tip in the series is a short one, perfect for following
the US Labor Day weekend, and details something I learned the hard
way from Tip 1 when setting up deployment tasks.</xhtml:p>
<xhtml:h2>Other articles in the series</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2014-08-11-zend-server-deployment-part-1.html">Tip 1:
zf-deploy</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-02-zend-server-deployment-part-3.html">Tip 3:
chmod</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-04-zend-server-deployment-part-4.html">Tip 4: Secure
your job scripts</xhtml:a></xhtml:li>
</xhtml:ul>
I will update this post to link to each article as it releases.</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Deployment with Zend Server (Part 1 of 8)]]></title>
    <published>2014-08-26T20:15:00+0000</published>
    <updated>2014-09-04T13:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-08-11-zend-server-deployment-part-1.html"/>
    <id>http://mwop.net/blog/2014-08-11-zend-server-deployment-part-1.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I manage a number of websites running on Zend Server, Zend's PHP
application platform. I've started accumulating a number of
patterns and tricks that make the deployments more successful, and
which also allow me to do more advanced things such as setting up
recurring jobs for the application, clearing page caches, and
more.</xhtml:p>
<xhtml:h2>Yes, YOU can afford Zend Server</xhtml:h2>
<xhtml:p>"But, wait, Zend Server is uber-expensive!" I hear some folks
saying.</xhtml:p>
<xhtml:p>Well, yes and no.</xhtml:p>
<xhtml:p>With the release of Zend Server 7, Zend now offers a
"Development Edition" that contains all the features I've covered
here, and which runs $195. This makes it affordable for small shops
and freelancers, but potentially out of the reach of
individuals.</xhtml:p>
<xhtml:p>But there's another option, which I'm using, which is even more
intriguing: <xhtml:a href="http://www.zend.com/en/solutions/cloud-solutions/aws-marketplace">Zend
Server on the Amazon Web Services (AWS) Marketplace</xhtml:a>. On AWS,
you can try out Zend Server free for 30 days. After that, you get
charged a fee on top of your normal AWS EC2 usage. Depending on the
EC2 instance you choose, this can run as low as ~$24/month (this is
on the t1.micro, and that's the total per month for both AWS and
Zend Server usage). That's cheaper than most VPS hosting or PaaS
providers, and gives you a full license for Zend Server.</xhtml:p>
<xhtml:p>Considering Zend Server is available on almost every PaaS and
IaaS offering available, this is a great way to try it out, as well
as to setup staging and testing servers cheaply; you can then
choose the provider you want based on its other features. For those
of you running low traffic or small, personal or hobbyist sites,
it's an inexpensive alternative to VPS hosting.</xhtml:p>
<xhtml:p>So... onwards with my first tip.</xhtml:p>
<xhtml:h2>Tip 1: zf-deploy</xhtml:h2>
<xhtml:p>My first trick is to use <xhtml:a href="https://github.com/zfcampus/zf-deploy">zf-deploy</xhtml:a>. This is a
tool <xhtml:a href="https://twitter.com/ezimuel">Enrico</xhtml:a> and I wrote
when prepping <xhtml:a href="https://apigility.org">Apigility</xhtml:a> for its
initial stable release. It allows you to create deployment packages
from your application, including zip, tarball, and ZPKs (Zend
Server deployment packages). We designed it to simplify packaging
<xhtml:a href="http://framework.zend.com">Zend Framework 2</xhtml:a> and
Apigility applications, but with a small amount of work, it could
likely be used for a greater variety of PHP applications.</xhtml:p>
<xhtml:p>zf-deploy takes the current state of your working directory, and
clones it to a working path. It then runs Composer (though you can
disable this), and strips out anything configured in your
<xhtml:kbd>.gitignore</xhtml:kbd> file (again, you can disable this). From
there, it creates your package.</xhtml:p>
<xhtml:p>One optional piece is that, when creating a ZPK, you can tell it
which <xhtml:kbd>deployment.xml</xhtml:kbd> you want to use and/or specify a
directory containing the <xhtml:kbd>deployment.xml</xhtml:kbd> and any install
scripts you want to include in the package. This latter is
incredibly useful, as you can use this to shape your
deployment.</xhtml:p>
<xhtml:p>As an example, on my own website, I have a CLI job that will
fetch my latest <xhtml:a href="https://github.com">GitHub</xhtml:a> activity. I
can invoke that in my <xhtml:kbd>post_stage.php</xhtml:kbd> script:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
if (! chdir(getenv('ZS_APPLICATION_BASE_DIR'))) {
  throw new Exception('Unable to change to application directory');
}

$php = '/usr/local/zend/bin/php';

$command = $php . ' public/index.php githubfeed fetch';
echo "\nExecuting `$command`\n";
system($command);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>One task I always do is make sure my application data directory
is writable by the web server. This next line builds on the above,
in that it assumes you've changed to your application directory
first:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$command = 'chmod -R a+rwX ./data';
echo "\nExecuting `$command`\n";
system($command);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Yes, PHP has a built-in for <xhtml:kbd>chmod</xhtml:kbd>, but it doesn't act
recursively.</xhtml:p>
<xhtml:p>For ZF2 and Apigility applications, zf-deploy also allows you to
specify a directory that contains the <xhtml:kbd>*local.php</xhtml:kbd> config
scripts for your <xhtml:kbd>config/autoload/</xhtml:kbd> directory, allowing
you to merge in configuration specific for the deployment
environment. This is a fantastic capability, as I can keep any
private configuration separate from my main repository.</xhtml:p>
<xhtml:p>Deployment now becomes:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
$ vendor/bin/zfdeploy.php mwop.net.zpk --configs=../mwop.net-config --zpk=zpk
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>and I now have a ZPK ready to push to Zend Server.</xhtml:p>
<xhtml:p>In sum: zf-deploy simplifies ZPK creation, and allows you to add
deployment scripts that let you perform other tasks on the
server.</xhtml:p>
<xhtml:h2>Next time...</xhtml:h2>
<xhtml:p>I've got a total of 8 tips queued up, including this one, and
will be publishing on Tuesdays and Thursdays; I'll update each post
to link to the others in the series. Next tip: creating scheduled
Job Queue jobs, Ã  la cronjobs.</xhtml:p>
<xhtml:h2>Other articles in the series</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="/blog/2014-08-28-zend-server-deployment-part-2.html">Tip 2:
Recurring Jobs</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-02-zend-server-deployment-part-3.html">Tip 3:
chmod</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/blog/2014-09-04-zend-server-deployment-part-4.html">Tip 4: Secure
your job scripts</xhtml:a></xhtml:li>
</xhtml:ul>
I will update this post to link to each article as it releases.</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Testing Code That Emits Output]]></title>
    <published>2014-08-21T19:30:00+0000</published>
    <updated>2014-08-21T19:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-08-11-testing-output-generating-code.html"/>
    <id>http://mwop.net/blog/2014-08-11-testing-output-generating-code.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Here's the scenario: you have code that will emit headers and
content, for instance, a front controller. How do you test
this?</xhtml:p>
<xhtml:p>The answer is remarkably simple, but non-obvious:
namespaces.</xhtml:p>
<xhtml:h2>Prerequisites</xhtml:h2>
<xhtml:p>For this approach to work, the assumptions are:</xhtml:p>
<xhtml:ul>
<xhtml:li>Your code emitting headers and output lives in a namespace
other than the global namespace.</xhtml:li>
</xhtml:ul>
<xhtml:p>That's it. Considering that most PHP code you grab anymore does
this, and most coding standards you run across will require this,
it's a safe bet that you're already ready. If you're not, go
refactor your code now, before continuing; you'll thank me
later.</xhtml:p>
<xhtml:h2>The technique</xhtml:h2>
<xhtml:p>PHP introduced namespaces in PHP 5.3. Namespaces cover classes,
as most of us are well aware, but they also cover constants and
functions -- a fact often overlooked, as before 5.6 (releasing next
week!), you cannot import them via <xhtml:kbd>use</xhtml:kbd> statements!</xhtml:p>
<xhtml:p>That does not mean they cannot be defined and used, however --
it just means that you need to manually import them, typically via
a <xhtml:kbd>require</xhtml:kbd> or <xhtml:kbd>require_once</xhtml:kbd> statement. These
are usually anathema in libraries, but for testing, they work just
fine.</xhtml:p>
<xhtml:p>Here's an approach I took recently. I created a file that lives
-- this is the important bit, so pay attention -- <xhtml:em>in the same
namespace as the code emitting headers and output</xhtml:em>. This file
defines several functions that live in the global (aka PHP's
built-in) namespace, and an accumulator static object I can then
use in my tests for assertions. Here's what it looks like:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace Some\Project;

abstract class Output
{
    public static $headers = array();
    public static $body;

    public static function reset()
    {
        self::$headers = array();
        self::$body = null;
    }
}

function headers_sent()
{
    return false;
}

function header($value)
{
    Output::$headers[] = $value;
}

function printf($text)
{
    Output::$body .= $text;
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>A few notes:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:kbd>headers_sent()</xhtml:kbd> always returns <xhtml:kbd>false</xhtml:kbd> here,
as most emitters test for a boolean <xhtml:kbd>true</xhtml:kbd> value and bail
early when that occurs.</xhtml:li>
<xhtml:li>I used <xhtml:kbd>printf()</xhtml:kbd> here, as <xhtml:kbd>echo</xhtml:kbd> cannot be
overridden due to being a PHP language construct and not an actual
function. As such, if you use this technique, you will have to
likely alter your emitter to call <xhtml:kbd>printf()</xhtml:kbd> instead of
<xhtml:kbd>echo</xhtml:kbd>. The benefits, however, are worth it.</xhtml:li>
<xhtml:li>I marked <xhtml:kbd>Output</xhtml:kbd> abstract, to prevent instantiation;
it should only be used statically.</xhtml:li>
</xhtml:ul>
<xhtml:p>I place the above file within my test suite, usually under a
"TestAsset" directory adjacent to the test itself; since it
contains functions, I'll name the file "Functions.php" as well.
This combination typically will prevent it from being autoloaded in
any way, as the test directory will often not have autoloading
defined, or will be under a separate namespace.</xhtml:p>
<xhtml:p>Inside your PHPUnit test suite, then, you would do the
following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace SomeTest\Project;

use PHPUnit_Framework_TestCase as TestCase;
use Some\Project\FrontController;
use Some\Project\Output;                 // &lt;-- our Output class from above
require_once __DIR__ . '/TestAsset/Functions.php'; // &lt;-- get our functions

class FrontControllerTest extends TestCase
{
    public function setUp()
    {
        Output::reset();
        /* ... */
    }

    public function tearDown()
    {
        Output::reset();
        /* ... */
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>From here, you test as normal -- but when you invoke methods
that will cause headers or content to emit, you can now test to see
what those contain:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
public function testEmitsExpectedHeadersAndContent()
{
    /* ... */

    $this-&gt;assertContains('Content-Type: application/json', Output::$headers);
    $json = Output::$body;
    $data = json_decode($json, true);
    $this-&gt;assertArrayHasKey('foo', $data);
    $this-&gt;assertEquals('bar', $data['foo']);
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:h2>How it works</xhtml:h2>
<xhtml:p>Why does this work?</xhtml:p>
<xhtml:p>PHP performs some magic when it resolves functions. With
classes, it looks for a matching class either in the current
namespace, or one that was imported (and potentially aliased); if a
match is not found, it stops, and raises an error. With functions,
however, it looks first in the current namespace, and if it isn't
found, then looks in the global namespace. This last part is key --
it means that if you redefine a function in the current namespace,
it will be used in lieu of the original function defined by PHP.
This also means that any code operating in the same namespace as
the function -- even if defined in another file -- will use that
function.</xhtml:p>
<xhtml:p>This technique just leverages this fact.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Better Understanding Controllers Through Basic Patterns]]></title>
    <published>2014-06-09T17:00:00+0000</published>
    <updated>2014-06-09T17:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2014-06-09-controllers-as-facades.html"/>
    <id>http://mwop.net/blog/2014-06-09-controllers-as-facades.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p><xhtml:a href="http://paul-m-jones.com/">Paul M. Jones</xhtml:a> has started
an interesting discussion rethinking the <xhtml:a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">
MVC</xhtml:a> pattern as applied to the web, which he has dubbed <xhtml:a href="https://github.com/pmjones/mvc-refinement">Action-Domain-Responder
(ADR)</xhtml:a>. If you haven't given it a read yet, click the link and
do that; this page will still be sitting here waiting when you
return.</xhtml:p>
<xhtml:p>I agree with a ton of it â heck, I've contributed to it a fair
bit via conversations with Paul. But there's been one thing nagging
at me for a bit now, and I was finally able to put it into words
recently.</xhtml:p>
<xhtml:p>Controllers â Actions in ADR â can be explained as
<xhtml:em>facades</xhtml:em>.</xhtml:p>
<xhtml:h2>Definitions</xhtml:h2>
<xhtml:p>The design pattern <xhtml:em>Facade</xhtml:em> originates in the book
"Design Patterns: Elements of Reusable Object Oriented Software,"
written by Erich Gamma, Ralph Johnson, Richard Helm, and John
Vlissides. Over the years, that book has come to be referred to as
the "Gang of Four", referring to the four authors, and often
abbreviated as "GoF".</xhtml:p>
<xhtml:p>The Facade pattern itself is one of the seven structural design
patterns defined in the GoF. Structural design patterns are those
that provide a mechanism for defining the <xhtml:em>relationships</xhtml:em>
between classes or objects in a system. Specifically:</xhtml:p>
<xhtml:blockquote>Facade defines a simplifed interface to a complex
system.</xhtml:blockquote>
<xhtml:p><xhtml:a href="http://en.wikipedia.org/wiki/Facade_pattern">Wikipedia
has a general entry on the pattern</xhtml:a> as well, and provides some
other general characteristics of a Facade:</xhtml:p>
<xhtml:ul>
<xhtml:li>A Facade creates a convenience method around a set of
operations, thus reducing the complexity of operations.</xhtml:li>
<xhtml:li>A Facade reduces the immediate dependencies of the calling code
(they call the Facade, not the underlying code).</xhtml:li>
</xhtml:ul>
<xhtml:h2>Facade Example</xhtml:h2>
<xhtml:p>As an example, let's consider the following workflow:</xhtml:p>
<xhtml:ul>
<xhtml:li>Marshal some objects</xhtml:li>
<xhtml:li>Munge some incoming data</xhtml:li>
<xhtml:li>Call a validator</xhtml:li>
<xhtml:li>If the data does not validate, raise an error</xhtml:li>
<xhtml:li>Start a transaction</xhtml:li>
<xhtml:li>Pass data to several different tables</xhtml:li>
<xhtml:li>Commit the transaction</xhtml:li>
<xhtml:li>Log the changes</xhtml:li>
<xhtml:li>Email notifications</xhtml:li>
</xhtml:ul>
<xhtml:p>Now, we could just write the code:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$db     = new Db($connectionConfig);
$log    = new Logger($loggerConfig);
$mailer = new Mailer($mailerConfig);
$data   = array_merge_recursive($_POST, $_FILES);

$inputFilter = new InputFilter();
$inputFilter-&gt;setData($data);
if (! $inputFilter-&gt;isValid()) {
    throw new DomainException();
}

$db-&gt;transactionStart();
$db-&gt;insertInto(/* ... */);
$db-&gt;insertInto(/* ... */);
$db-&gt;insertInto(/* ... */);
$db-&gt;transactionStop();

$log-&gt;info('Finished a transaction');
$mailer-&gt;send('New transaction')
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Straight-forward. But imagine if you needed to do this more than
once. Or if you wanted to re-use this logic in multiple places in
your application. This is a situation just waiting to go
out-of-sync â and one where developers will come to rely on
cut-and-paste for doing it correctly.</xhtml:p>
<xhtml:p>A facade would wrap this logic:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
class DataTransaction
{
    protected $db;
    protected $logger;
    protected $mailer;

    public function __construct(Db $db, Logger $logger, Mailer $mailer)
    {
        $this-&gt;db     = $db;
        $this-&gt;logger = $logger;
        $this-&gt;mailer = $mailer;
    }

    public function execute($data)
    {
        $inputFilter = new InputFilter();
        $inputFilter-&gt;setData($data);
        if (! $inputFilter-&gt;isValid()) {
            throw new DomainException();
        }

        $this-&gt;db-&gt;transactionStart();
        $this-&gt;db-&gt;insertInto(/* ... */);
        $this-&gt;db-&gt;insertInto(/* ... */);
        $this-&gt;db-&gt;insertInto(/* ... */);
        $this-&gt;db-&gt;transactionStop();

        $this-&gt;logger-&gt;info('Finished a transaction');
        $this-&gt;mailer-&gt;send('New transaction')
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You would then instantiate the facade â likely using an <xhtml:a href="http://en.wikipedia.org/wiki/Inversion_of_control">Inversion of
Control</xhtml:a> container to inject the dependencies â and then invoke
it:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$dataTransaction-&gt;execute(array_merge_recursive($_POST, $_FILES));
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This code fulfills the Facade pattern: we're no longer directly
manipulating dependencies, and we've simplified a complex set of
operations to a single, unified API.</xhtml:p>
<xhtml:h2>Controllers and Actions</xhtml:h2>
<xhtml:p>Hopefully you can see where I'm going with this.</xhtml:p>
<xhtml:blockquote>Controllers in MVC, and Actions in ADR, are best
characterized as Facades.</xhtml:blockquote>
<xhtml:p>You can define Controllers or Actions as Facades for the
following operations:</xhtml:p>
<xhtml:ul>
<xhtml:li>Marshaling arguments from the request.</xhtml:li>
<xhtml:li>Invoking any domain/model logic, using arguments marshaled from
the request.</xhtml:li>
<xhtml:li>Marshaling and returning a response/responder.</xhtml:li>
</xhtml:ul>
<xhtml:p>I think characterizing Controllers and Actions as Facades has
some huge benefits. In both <xhtml:a href="http://blog.astrumfutura.com/archives/373-The-M-in-MVC-Why-Models-are-Misunderstood-and-Unappreciated.html">
PHP</xhtml:a> and <xhtml:a href="https://www.google.com/search?q=fat+controllers+rails">Rails</xhtml:a>,
we've witnessed the problems that arise from so-called "Fat
Controllers" â controllers that do a ton of work, making them
untestable, unreadable, non-reusable nightmares. If we think of
them as Facades, specifically for the three items noted above, we
focus on the specific purpose they fulfill within the system,
giving us:</xhtml:p>
<xhtml:ul>
<xhtml:li>Adherence to the <xhtml:a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single
Responsibility Principle</xhtml:a></xhtml:li>
<xhtml:li>Adherence to the <xhtml:a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency
Inversion Priniciple</xhtml:a></xhtml:li>
<xhtml:li>Adherence to the <xhtml:a href="http://en.wikipedia.org/wiki/Law_Of_Demeter">Law of
Demeter</xhtml:a></xhtml:li>
<xhtml:li>Ability to unit test our Controllers and Actions (instead of
requiring integration tests with complex configuration and
setup)</xhtml:li>
<xhtml:li>The possibility of <xhtml:a href="http://en.wikipedia.org/wiki/Hierarchical_model%E2%80%93view%E2%80%93controller">
hierarchical MVC</xhtml:a> (usually tacked on, or poorly
implemented)</xhtml:li>
<xhtml:li>Clarity of purpose when creating Controllers and Actions (do
only those three things)</xhtml:li>
</xhtml:ul>
<xhtml:p>Defining them as Facades for these three specific operations
means we push logic into specific domains, achieving a proper
<xhtml:a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of
concerns</xhtml:a>. Anything that falls outside those three operations
gets pushed elsewhere:</xhtml:p>
<xhtml:ul>
<xhtml:li>Models/Domains are invoked with the arguments marshaled from
the request. If you find yourself calling many models, or
manipulating the results returned by models, you need to create
Facades in your model/domain layer.</xhtml:li>
<xhtml:li>If you find yourself doing lots of work in creating your
response, you need to create a Facade for marshaling the response
(in ADR, that would mean encapsulating more logic in your
Responder).</xhtml:li>
</xhtml:ul>
<xhtml:p>For me, thinking of Controllers and Actions as Facades has an
additional benefit: it describes rather complex
<xhtml:em>architectural</xhtml:em> patterns in terms of <xhtml:em>basic design
patterns</xhtml:em>. I find the more I can reduce the complexity of a
definition, the more likely I will understand and use it
correctly.</xhtml:p>
<xhtml:h3>Epilogue</xhtml:h3>
<xhtml:p>Consider this post a <xhtml:em>refinement</xhtml:em> of the MVC and ADR
architectural patterns â a way of describing them in terms of more
fundamental design patterns.</xhtml:p>
<xhtml:p>Also, this article is littered with links. Click them. Read
them. Digest them. Read the books they reference. Design and
architectural patterns exist because developers observed the
patterns and gave them names; learn to recognize them and apply
them, at all levels of your application.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[2008: The year in review]]></title>
    <published>2008-12-31T19:17:03+0000</published>
    <updated>2009-01-05T07:00:49+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/203-2008-The-year-in-review.html"/>
    <id>http://mwop.net/blog/203-2008-The-year-in-review.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>That time of year again -- wrap-up time. Each year, it seems
like it's the busiest ever, and I often wonder if it will ever slow
down. As usual, I'm restricting myself to primarily professional
activities out of respect for the privacy of my family.</xhtml:p>
<xhtml:p>The short, executive summary:</xhtml:p>
<xhtml:ul>
<xhtml:li>One trip to Israel</xhtml:li>
<xhtml:li>One trip to The Netherlands</xhtml:li>
<xhtml:li>One trip to California's Bay Area</xhtml:li>
<xhtml:li>One trip to Atlanta, GA</xhtml:li>
<xhtml:li>Three minor releases of Zend Framework</xhtml:li>
<xhtml:li>Seven webinars, six for zend.com and one for Adobe</xhtml:li>
<xhtml:li>Three conferences attended as a speaker, including:
<xhtml:ul>
<xhtml:li>One six-hour workshop</xhtml:li>
<xhtml:li>One three-hour tutorial (as a co-presenter)</xhtml:li>
<xhtml:li>Four regular sessions</xhtml:li>
<xhtml:li>Two panel sessions (one scheduled, one for an uncon)</xhtml:li>
<xhtml:li>Two uncon sessions (one as a co-presenter)</xhtml:li>
<xhtml:li>One foul-mouthed Pecha Kucha talk</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Ten Burlington, VT PHP User's Group meetings attended; I spoke
at many</xhtml:li>
<xhtml:li>One Bug Hunt week organized</xhtml:li>
<xhtml:li>Two books reviewed as a technical editor</xhtml:li>
<xhtml:li>Six articles for <xhtml:a href="http://devzone.zend.com/">DevZone</xhtml:a></xhtml:li>
<xhtml:li>50 blog entries (including this one)</xhtml:li>
</xhtml:ul>
<xhtml:p>Read on for the gruesome, month-by-month breakdown.</xhtml:p>
<xhtml:h2>January and February</xhtml:h2>
<xhtml:p>I started coding <xhtml:code>Zend_Form</xhtml:code> in earnest in January,
and had a preview ready for testing mid-month. The pace continued
into February, as I addressed user feedback and issues, and
continued working feverishly towards what would become Zend
Framework's 1.5.0 release.</xhtml:p>
<xhtml:p>I also answered many questions for and had many discussions with
<xhtml:a href="http://www.calevans.com/">Cal Evans</xhtml:a> relating to his
"Guide to Programming Zend Framework".</xhtml:p>
<xhtml:h2>March</xhtml:h2>
<xhtml:p>I gave my first webinar of the year early in March, on the
subject of <xhtml:code>Zend_Form</xhtml:code>; it was very well attended, but
unfortunately there was an issue recording the sound, so the
recording was never released. After two more failed attempts at
re-recording, we gave up. I apologize to all who have wanted to
view it.</xhtml:p>
<xhtml:p>While working towards the 1.5.0 release, <xhtml:a href="http://ralphschindler.com/">Ralph Schindler</xhtml:a> and I also
finished up final touches on <xhtml:code>Zend_Layout</xhtml:code> and the
various "placeholder" view helper implementations.</xhtml:p>
<xhtml:p>On 17 March 2008, we released Zend Framework 1.5, our first
minor release following 1.0.0.</xhtml:p>
<xhtml:p>I started blogging tips and tricks for 1.5, and also writing
articles for <xhtml:a href="http://devzone.zend.com/">DevZone</xhtml:a> during
March, and had tremendous amounts of feedback. In fact, one blog
post, on "Login and Authentication", is still one of the most
trafficked on my blog after 9 months.</xhtml:p>
<xhtml:p>I also began what I envisioned as a series of Vim posts, but,
alas, it has resulted only in two.</xhtml:p>
<xhtml:h2>April</xhtml:h2>
<xhtml:p>Following the 1.5 release, I did weekly posts for a month or so
covering various features of Zend Framework, including Front
Controller plugins, Action Controller helpers, and View helpers.
Towards the end of the month, the entire team participated in a
Q&amp;A webinar to discuss the 1.5 release.</xhtml:p>
<xhtml:h2>May</xhtml:h2>
<xhtml:p>At the beginning of the month, I released the last in my series
of 1.5 tutorials on <xhtml:a href="http://devzone.zend.com/">DevZone</xhtml:a>,
covering Form decorators. This has saved me countless hours on IRC
and in the mailing lists explaining how this aspect of forms
work.</xhtml:p>
<xhtml:p>During this month, we also finally announced that Zend Framework
would be partnering with <xhtml:a href="http://dojotoolkit.org/">Dojo</xhtml:a>
to provide an out-of-the-box RIA solution. I began work identifying
the various integration points and creating proposals for
implementation. I also did a Q&amp;A webinar with the Dojo team
outlining the proposed integration.</xhtml:p>
<xhtml:p>At the end of the month, the ZF team reorganized the subversion
repository to allow for an "Extras" repository, and also to ensure
that projects originating in the laboratory or extras and migrating
to the standard library retain all history. Even with the big
notices we put on the ZF site, articles on DevZone, and posts on
various blogs, we still get questions on this seven months later.
Let this be a lesson to you: plan your repositories for any
contingency as early as you can!</xhtml:p>
<xhtml:h2>June</xhtml:h2>
<xhtml:p>I started June with a trip to Israel, to visit the Zend offices.
I met up with <xhtml:a href="http://andigutmans.blogspot.com/">Andi</xhtml:a>
in Newark, and we flew from there to Israel several rows apart in
coach. One of the best meals I've ever had was after we landed and
he invited me to his sister's place for dinner, and we dined on
chicken marinated in home-pressed olive oil and fresh herbs,
hummus, and pitas baked with fresh oregano. The rest of the week
was spent in the office, in endless meetings.</xhtml:p>
<xhtml:p>Four days after returning from Israel, I flew to Amsterdam for
the <xhtml:a href="http://www.phpconference.nl">Dutch PHP Conference</xhtml:a>,
to which I'd been invited to speak. My good friend <xhtml:a href="http://wolerized.com/">Remi</xhtml:a> took the train up to Amsterdam to
meet me the day I flew in, and we walked and walked and walked
around the city, until dinnertime. <xhtml:a href="http://www.leftontheweb.com/">Stefan Koopmanschap</xhtml:a> then met us
for a lovely dinner, and I returned to the hotel to finish
screenshots for the six-hour workshop on Zend Framework I was
presenting the next day. The entire conference was wonderful, and I
met many fantastic people, including <xhtml:a href="http://www.priebsch.de/">Stefan Priebsch</xhtml:a>, <xhtml:a href="http://www.lornajane.net/">Lorna Jane Mitchell</xhtml:a>, <xhtml:a href="http://andries.systray.be/">Andries Seutens</xhtml:a>, and many, many
more -- plus many familiar faces, such as Sebastian Bergmann, Derek
Rethans, Mike Van Dam, Felix de Vliegher, and Marco Tabini.</xhtml:p>
<xhtml:p>On my blog, I started raising the question of how we will refer
to Abstract classes and Interfaces in PHP 5.3, but I think my
arguments went largely unheard and/or misunderstood.</xhtml:p>
<xhtml:p>The last half of the month was spent working on both Dojo
integration with Zend Framework (a task that turned out fairly
easy, in large part due to some wonderful guidance from <xhtml:a href="http://higginsforpresident.net/">Pete Higgins</xhtml:a>), and preparing
<xhtml:code>Zend_Test_PHPUnit</xhtml:code> for inclusion in Zend Framework
1.6.</xhtml:p>
<xhtml:h2>July</xhtml:h2>
<xhtml:p>I think I'll remember July as the month of the neverending
release cycle.</xhtml:p>
<xhtml:h2>August</xhtml:h2>
<xhtml:p>On 8 August 2008, PHP 4 officially died. I thought about
drinking a toast for about 3 seconds, forgot about it, and finished
my beer.</xhtml:p>
<xhtml:p>The following Monday, we released the second release candidate
of Zend Framework 1.6.0.</xhtml:p>
<xhtml:p>August, too, became part of the month of the neverending release
cycle.</xhtml:p>
<xhtml:h2>September</xhtml:h2>
<xhtml:p>Finally, on 2 September 2008, we released 1.6.0 into the wild.
My contributions included, as noted earlier, Dojo integration,
PHPUnit integration, and code assistance on our Captcha solution
and file upload support.</xhtml:p>
<xhtml:p>The next day, I gave yet another webinar on Zend Framework and
Dojo integration, but finally actually had some code samples and
working demos to show off, soundly quieting the claims of
vaporware. I also started learning about Dojo release builds, under
the tutelage of Pete Higgins.</xhtml:p>
<xhtml:p>Mid-month saw the fourth annual Zend/PHP Conference, this time
in Santa Clara. I was involved in a marathon of seven different
sessions over three days. I've rarely been so exhausted, and it's a
wonder I remember anything following -- but I had a wonderful time
with the PHP <xhtml:em>community</xhtml:em> following, including <xhtml:a href="http://www.bombdiggity.net/">Jon Whitcraft</xhtml:a>, <xhtml:a href="http://akrabat.com/">Rob Allen</xhtml:a>, the <xhtml:a href="http://ibuildings.nl/">ibuildings</xhtml:a> crew, and more.</xhtml:p>
<xhtml:p>I also finally got to meet <xhtml:a href="http://sklar.com/">David
Sklar</xhtml:a>, to whom I owe the fact of my first public speaking
engagement at the first ZendCon.</xhtml:p>
<xhtml:p>Following ZendCon, there were announcements that two colleagues
at Zend I respect highly were leaving for new opportunities: Mark
de Visser left to join Sonatype as its CEO, and Cal Evans left to
head ibuildings' new Center for PHP Expertise. I wish them both
luck in their new endeavors.</xhtml:p>
<xhtml:h2>October</xhtml:h2>
<xhtml:p>I helped <xhtml:a href="http://wadearnold.com/blog/">Wade Arnold</xhtml:a>
complete testing of <xhtml:code>Zend_Amf</xhtml:code> as we prepared for the
Zend Framework 1.7.0 release, and learned a fair deal about Flex in
the process.</xhtml:p>
<xhtml:p>During this time, I also completed a technical review of
<xhtml:a href="http://zendframeworkinaction.com">Zend Framework in
Action</xhtml:a>. Rob Allen and Nick Lo had contacted me earlier in the
year, but I'd been unable to commit to it. In July, I agreed, only
to get sucked into the neverending release cycle. Fortunately, in
October I had time to complete the review. The book is very well
written and organized, and I can't recommend it highly enough. I
was able to give some constructive feedback and have some dialog
with Rob that, hopefully, helped clarify a few areas of Zend
Framework, and will hopefully help their readers.</xhtml:p>
<xhtml:p>For the 1.7 release of Zend Framework, I worked on performance
benchmarking, profiling, improvements, and a best practices
guide.</xhtml:p>
<xhtml:p>Late in the month, I delivered a webinar with Lee Brimelow for
Adobe to showcase the upcoming AMF support in Zend Framework.</xhtml:p>
<xhtml:h2>November</xhtml:h2>
<xhtml:p>The last few days of October and first week of November, I
organized a bug hunt week for Zend Framework, culminating in a
<xhtml:a href="http://bughuntday.org/">Bug Hunt Day</xhtml:a> event held and
organized by <xhtml:a href="http://www.phpbelgium.be/">PHP Belgium</xhtml:a>
and <xhtml:a href="http://phpgg.nl/">phpGG</xhtml:a> (The Netherlands). We
closed out close to 150 issues over the course of the week and a
couple dozen during the Bug Hunt Day, and got many contributors
started on the path of professional bug squashing
enlightenment.</xhtml:p>
<xhtml:p>The second week of November, I flew down to Atlanta, GA, to
attend <xhtml:a href="http://phpworks.mtacon.com/">php|works</xhtml:a>.. err,
php|works/pyworks. First off, a huge thank you to <xhtml:a href="http://naramore.net/blog/">Elizabeth Naramore</xhtml:a>, who helped me
fairly last minute to make sure I had a room to stay in. While
there, I presented my Dojo and Zend Framework talk, but with some
updated content. Of course, every presenter's nightmare occurred,
and I had to reboot my laptop mid-stream. I surprised myself, and,
I think, the attendees by actually being able to continue speaking
while we waited for my machine to reboot.</xhtml:p>
<xhtml:p>I also presented a <xhtml:a href="http://en.wikipedia.org/wiki/Pecha_Kucha">Pecha Kucha</xhtml:a> talk --
I re-branded the phrase as "Pikachu" a couple weeks earlier (a
reference to the iconic character in <xhtml:a href="http://www.pokemon.com/">Pokemon</xhtml:a>, a game I play with my
daughter), and that phrase has, for better or for worse, stuck. My
talk was on how to be banned from an open source project, and I
swore entirely too much. It was a nice release, however, as I try
to be politic in public usually, and sometimes just need to
rant.</xhtml:p>
<xhtml:p>I got to see a ton of old and new friends alike while there --
former Zenders <xhtml:a href="http://mikenaberezny.com/">Mike
Naberezny</xhtml:a> and <xhtml:a href="http://paul-m-jones.com/">Paul M.
Jones</xhtml:a>, <xhtml:a href="http://caseysoftware.com/blog/">Keith
Casey</xhtml:a>, <xhtml:a href="http://ishouldbecoding.com/">Matthew
Turland</xhtml:a>, <xhtml:a href="http://jansch.nl/">Ivo</xhtml:a> and a bunch of the
ibuildings crew, Pollita (sorry, I have to stop linking everyone
now...), Sebastian... basically, a ton of the usual suspects. I
also met a lot of new people, many of them introducing themselves
as ZF users; I appreciate all of you introducing yourselves, as
<xhtml:em>you</xhtml:em> are the reason I code.</xhtml:p>
<xhtml:p>The following Monday, 17 November 2008, we released Zend
Framework 1.7.0, timed to coincide with the the Adobe MAX
conference, as AMF support was our major story for the release.
<xhtml:code>Zend_Amf</xhtml:code> has generated tremendous buzz in both the PHP
and Flash/Flex communities, due to the simplicity and robustness of
its design. This release also marked the first release to include
the extras repository -- which now ships with community-contributed
<xhtml:a href="http://jquery.com/">JQuery</xhtml:a> support.</xhtml:p>
<xhtml:h2>December</xhtml:h2>
<xhtml:p><xhtml:a href="http://shiflett.org/">Chris Shiflett</xhtml:a> and <xhtml:a href="http://seancoates.com/">Sean Coates</xhtml:a> organized this year's
<xhtml:a href="http://phpadvent.org/2008/">PHP Advent Calendar</xhtml:a>, and
solicited entries from a select group of PHP community members a
week in advance. I didn't volunteer to contribute for the first
week, but managed to get mine in on the first day... only to see it
appear the very next. Hopefuly, my guide to responsible
contributions will help those wondering how to report and/or fix
bugs in open source projects.</xhtml:p>
<xhtml:p>I started blogging more, in part due to more free time in the
evenings (it's nice when the kids go to bed at a reasonable hour!),
and in part due to finally putting a number of ideas into a
blogging "backlog" so that I could pick up and post when I had
time. From this, I added an entry on mumbles/irssi integration,
autocompletion with ZF and Dojo, created a simple pubsub
implementation for PHP, and started a series of posts on how to
architect models (and some concrete tips for doing so). I have more
posts in December than I have in several other months combined.</xhtml:p>
<xhtml:h2>Reflection</xhtml:h2>
<xhtml:p>This past year, I became much more involved with both the Zend
Framework and greater PHP communities, and feel I have enriched my
life with many wonderful new friends -- some local, some global. I
feel truly fortunate to be working in a job I love, contributing to
a project that helps others do the jobs they love, and part of such
an accepting and vibrant group of people.</xhtml:p>
<xhtml:p>Looking back, I travelled less, though because most of it was in
a five month period, it felt like more. On that note, I vow never
to do back to back trips across the big pond, as it was incredibly
exhausting.</xhtml:p>
<xhtml:h2>Looking ahead to 2009</xhtml:h2>
<xhtml:p>I have several things to look forward to already in 2009. I'll
be continuing my series of posts on models. In February, I will
have an article published in a print magazine for the first tiem.
I'll be speaking at PHP Quebec in March, presenting two sessions
and sitting in on a panel. I hope to speak at several other
conferences, and potentially write more articles and tutorials.
Overall, I want to contribute more to the ecosystem of best
practices in PHP, particularly in the areas of testing and
deployment strategies.</xhtml:p>
<xhtml:p>I hope this post finds <xhtml:em>you</xhtml:em> in good health and spirits,
and that you have a fantastic start to the new year!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Mumbles irssi integration]]></title>
    <published>2008-12-10T20:01:50+0000</published>
    <updated>2008-12-12T20:19:50+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/197-Mumbles-irssi-integration.html"/>
    <id>http://mwop.net/blog/197-Mumbles-irssi-integration.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been using IRC regularly for the past six to nine months,
in large part due to the growing ZF community on the <xhtml:a href="http://freenode.net/">Freenode</xhtml:a> #zftalk channel (unfortunately,
I simply don't have time to be in that particular channel any more,
but you can generally find me in #zftalk.dev), but also to keep in
contact with other peers, friends, and colleagues.</xhtml:p>
<xhtml:p>One difficulty, however, is keeping productivity high while
staying on IRC. To me, the ultimate client would provide me
notifications when somebody mentions my name or a watch word -
allowing me to read the channel at my leisure, yet still respond to
people in a timely fashion.</xhtml:p>
<xhtml:p>I've tried a variety of IRC clients over the months, starting
with Pidgin (poor interface for IRC), mirc (huge difficulties
figuring out the UI), xchat (not bad, but seemed a bit heavy),
Chatzilla (I liked the interface, but once you got many tabs going,
it was unwieldy switching around between them; I also hated that
Firefox dying or restarting caused Chatzilla to do likewise), and
now <xhtml:a href="http://irssi.org/">irssi</xhtml:a>.</xhtml:p>
<xhtml:p>So far, irssi is the best I've tried -- I can run it in screen,
allowing me to keep it open as long as my machine is running. The
interface is reasonable, and cleanly keeps channels separate from
private messages. Opening, closing, and manipulating windows is
easy. And it's highly scriptable... including in a language I
actually use! The perl bindings are top notch, though sometimes
cryptic. What's important, however, is that there are plenty of
examples out there if you want to try doing something. So, I
figured I'd write up a quick plugin to trigger notifications.</xhtml:p>
<xhtml:p>I've been using a number of different notification servers for
linux, and personally like both <xhtml:a href="http://gnotify.sourceforge.net">gnotify</xhtml:a> and <xhtml:a href="http://www.mumbles-project.org/">mumbles</xhtml:a>. Both are very
lightweight and offer network protocols for triggering
notifications.</xhtml:p>
<xhtml:p>I first tried using gnotify. It has a very, very simple TCP
protocol, and I've had success creating messages from the shell,
PHP, and perl. Unfortunately, for some reason, using it in irssi
displayed some odd behavior: I'd lose the cursor and the ability to
enter input from the time a notification triggered until it
completed (i.e., the notification disappeared). Forking the process
did not appear to help.</xhtml:p>
<xhtml:p>So, I decided to try out mumbles. Mumbles is written in python,
and has themeable notifications -- already a plus. It runs via dbus
by default, but can also optionally spawn a server that implements
the <xhtml:a href="http://growl.info/">Growl protocol</xhtml:a> -- making it
accessible for any process to send notifications. Additionally, it
has a command-line utility for triggering notifications -- by
default over dbus, but optionally by contacting the growl server,
if running.</xhtml:p>
<xhtml:p>Growl's protocol is a bit involved, and I didn't want to spend
too much time on this. So, I did a quick, dirty hack: I used
backticks to trigger the CLI utility. And it works
<xhtml:em>fantastically</xhtml:em> -- no delays whatsoever. Here's the
code:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="perl" xml:lang="perl">
# $HOME/.irssi/scripts/mumbles.pl
use strict;
use Irssi;
use Irssi::Irc;
use vars qw($VERSION %IRSSI);

$VERSION = '0.1.0';
%IRSSI = (
    authors     =&gt; \"Matthew Weier O'Phinney\",
    contact     =&gt; 'matthew@weierophinney.net',
    name        =&gt; 'Mumbles notifications for irssi',
    description =&gt; 'This script enables mumbles notifications for irssi',
    license     =&gt; 'New BSD',
        changed     =&gt; \"2008-12-10\"
);


sub mumbles_sig_printtext {
  my ($dest, $text, $stripped) = @_;

  if (($dest-&gt;{level} &amp; (MSGLEVEL_HILIGHT|MSGLEVEL_MSGS)) &amp;&amp; ($dest-&gt;{level} &amp; MSGLEVEL_NOHILIGHT) == 0)
  {
    if ($dest-&gt;{level} &amp; MSGLEVEL_PUBLIC)
    {
      mumbles($dest-&gt;{target} . \" : \" . $text);
    }
  }
}

sub mumbles {
    my $message = shift;
    my $response;

    $message =~ s/[^!-~\s]//g;

    `/usr/bin/mumbles-send -g 127.0.0.1 -s \"IRC\" \"$message\"`;
}

Irssi::command_bind 'mumbles' =&gt; sub {
    my ($message) = @_;
    mumbles($message);
};

Irssi::signal_add({
  'print text'    =&gt; \&amp;mumbles_sig_printtext
});
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This triggers a notification for any "highlight" event --
basically, anytime anybody "says" my name in a channel, or mentions
a keyword I've marked for highlighting. Additionally, I created a
"mumbles" command so that I can send test messages (usage:
"/mumbles "this is the message..."). You could certainly bind to
other events, such as topic changes, joins, parts, etc -- I'm only
interested in highlight events.</xhtml:p>
<xhtml:p>You may note the regexp in there. One thing I discovered was
that most messages contained control and non-ascii characters that
often resulted in unreadable notifications, as well as some nasty
messages reported by irssi. The regexp removes anything not in the
ascii character set or the set of whitespace definitions prior to
emitting the notification.</xhtml:p>
<xhtml:p>Something else I needed to do was configure compiz to ensure
that the notifications actually popped <xhtml:em>above</xhtml:em> my windows. I
did this by going into the compiz configuration manager, selecting
"General Options", selecting the "Focus &amp; Raise Behaviour" tab,
and modifying the "Focus Prevention Windows" to read as
follows:</xhtml:p>
<xhtml:pre>
<xhtml:code>(any) &amp; !(class=Mumbles)
</xhtml:code>
</xhtml:pre>
<xhtml:p>To test it, I placed the script in
$HOME/.irssi/scripts/mumbles.pl, and then, in irssi, executed
"/load mumbles.pl".</xhtml:p>
<xhtml:p>Once I had it to my liking, I symlinked it into my
$HOME/.irssi/scripts/autorun/ directory, allowing it to run as soon
as irssi loads. I can now have irssi running in a screen session,
or minimize the terminal, and get notifications -- keeping me
productive and informed at the same time.</xhtml:p>
<xhtml:p><xhtml:b>UPDATED 2008-12-12:</xhtml:b> Added information on how to load the
script, as well as fixed the location to the autorun directory.
Thanks, @sidhighwind!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vimgrep and Vim Project]]></title>
    <published>2008-10-21T11:36:49+0000</published>
    <updated>2008-10-23T01:55:03+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html"/>
    <id>http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Chris Hartjes today was <xhtml:a href="http://www.littlehart.net/atthekeyboard/2008/10/20/vim-programming-bounty-fuzzyfind-inside-files/">
on a quest for a "find in project" feature for Vim</xhtml:a>. "Find in
Project" was a feature of Textmate that he'd grown accustomed to
and was having trouble finding an equivalent for.</xhtml:p>
<xhtml:p>The funny thing is that Textmate is a newcomer, and, of course,
vim has had such a feature for years. The thing to remember with
vim, of course, is its unix roots; typically if you know the unix
command for doing something, you can find what you need in vim. In
this case, the key is the vimgrep plugin, which ships in the
standard vim distribution.</xhtml:p>
<xhtml:p>There are a variety of resources on vimgrep. The vim
documentation includes a chapter on it, and a quick <xhtml:a href="http://www.google.com/search?q=vimgrep">google search</xhtml:a> on the
subject turns up some nice tutorials immediately. If you've ever
used grep, the syntax is very straightforward:</xhtml:p>
<xhtml:pre>
<xhtml:code>vimgrep /{pattern}/[g][j] {file} ...
</xhtml:code>
</xhtml:pre>
<xhtml:p>The "g" option indicates that all matches for a search will be
returned instead of just one per line, and the "j" option tells vim
<xhtml:em>not</xhtml:em> to jump to the first match automatically. What does
the "g" flag really mean, though, and how are searches
returned?</xhtml:p>
<xhtml:p>Vimgrep returns search results in what's known as a "quickfix"
window, and this is where the vimgrep documentation falls apart...
it doesn't explain what this is, or link to it (which would be a
nice indication that it actually has a separate topic for
this).</xhtml:p>
<xhtml:p>The Quickfix window is a pane that shows a search result per
line. Each line shows the file that matches, the line number, and
the contents of that line:</xhtml:p>
<xhtml:pre>
<xhtml:code>/home/matthew/git/bugapp/application/controllers/helpers/GetForm.php|10| * @var Zend_Loader_PluginLoader
</xhtml:code>
</xhtml:pre>
<xhtml:p>You can't do much from this window; it simply serves as a visual
indicator of what file you're currently looking at from the list.
However, in the main window, you can start iterating through the
results one at a time, using a subset of the Quickfix commands. As
a quick summary:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:b>:cc</xhtml:b> will move to the next match in the list</xhtml:li>
<xhtml:li><xhtml:b>:cn</xhtml:b> will move to the next match in the list</xhtml:li>
<xhtml:li><xhtml:b>:cp</xhtml:b> will move to the previous match in the list</xhtml:li>
<xhtml:li><xhtml:b>:cr</xhtml:b> will rewind to the first match in the list</xhtml:li>
<xhtml:li><xhtml:b>:cla</xhtml:b> will fast forward to the last match in the
list</xhtml:li>
</xhtml:ul>
<xhtml:p>When done, you can simply close the Quickfix window/pane, and
continue working.</xhtml:p>
<xhtml:p>I should note that vimgrep <xhtml:em>is</xhtml:em> cross-platform. On
*nix-based systems, it defaults to using the native grep command,
but it also contains an internal (slower) implementation for use on
operating systems that do not provide grep by default. You may also
map the command to alternate implementations if desired.</xhtml:p>
<xhtml:p>I personally use this feature most with the <xhtml:a href="http://www.vim.org/scripts/script.php?script_id=69">project
plugin</xhtml:a>. Project maps vimgrep to two different commands:
&lt;Leader&gt;g and &lt;Leader&gt;G. The first will grep all files
in the current project at the current level; the second does the
same, but also recurses into subprojects. This is an incredibly
easy way to refactor code, particularly for name changes.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[git-svn Tip: don't use core.autocrlf]]></title>
    <published>2008-09-24T16:16:27+0000</published>
    <updated>2008-09-24T16:16:27+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/191-git-svn-Tip-dont-use-core.autocrlf.html"/>
    <id>http://mwop.net/blog/191-git-svn-Tip-dont-use-core.autocrlf.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been playing around with <xhtml:a href="http://git.or.cz/">Git</xhtml:a> in the past couple months, and have
been really enjoying it. Paired with subversion, I get the best of
all worlds -- distributed source control when I want it (working on
new features or trying out performance tuning), and non-distributed
source control for my public commits.</xhtml:p>
<xhtml:p><xhtml:a href="http://github.com/guides/dealing-with-newlines-in-git">Github</xhtml:a>
suggests that when working with remote repositories, you turn on
the autocrlf option, which ensures that changes in line endings do
not get accounted for when pushing to and pulling from the remote
repo. However, when working with git-svn, this actually causes
issues. After turning this option on, I started getting the error
"Delta source ended unexpectedly" from git-svn. After a bunch of
aimless tinkering, I finally asked myself the questions, "When did
this start happening?" and, "Have I changed anything with Git
lately?" Once I'd backed out the config change, all started working
again.</xhtml:p>
<xhtml:p>In summary: don't use "git config --global core.autocrlf true"
when using git-svn.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
